"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[9318],{2742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(8168),i=(n(6540),n(5680));const a={},o="33.\xa0Search in Rotated Sorted Array",l={unversionedId:"binary search/Search in Rotated Sorted Array",id:"binary search/Search in Rotated Sorted Array",title:"33.\xa0Search in Rotated Sorted Array",description:"33.\xa0Search in Rotated Sorted Array",source:"@site/docs/binary search/33.\xa0Search in Rotated Sorted Array.md",sourceDirName:"binary search",slug:"/binary search/Search in Rotated Sorted Array",permalink:"/AlgorithmNEnglishQuests/docs/binary search/Search in Rotated Sorted Array",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/binary search/33.\xa0Search in Rotated Sorted Array.md",tags:[],version:"current",sidebarPosition:33,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"739.\xa0Daily Temperatures",permalink:"/AlgorithmNEnglishQuests/docs/Stack/Daily Temperatures"},next:{title:"74.\xa0Search a 2D Matrix",permalink:"/AlgorithmNEnglishQuests/docs/binary search/Search a 2D Matrix"}},s={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],m={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.yg)(p,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"33search-in-rotated-sorted-array"},"33.\xa0Search in Rotated Sorted Array"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/search-in-rotated-sorted-array/"},"33.\xa0Search in Rotated Sorted Array")),(0,i.yg)("h2",{id:"problem"},"Problem"),(0,i.yg)("p",null,"There is an integer array\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0sorted in ascending order (with\xa0",(0,i.yg)("strong",{parentName:"p"},"distinct"),"\xa0values)."),(0,i.yg)("p",null,"Prior to being passed to your function,\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0is\xa0",(0,i.yg)("strong",{parentName:"p"},"possibly rotated"),"\xa0at an unknown pivot index\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"k"),"\xa0(",(0,i.yg)("inlineCode",{parentName:"p"},"1 <= k < nums.length"),") such that the resulting array is\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]"),"\xa0(",(0,i.yg)("strong",{parentName:"p"},"0-indexed"),"). For example,\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"[0,1,2,4,5,6,7]"),"\xa0might be rotated at pivot index\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"3"),"\xa0and become\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"[4,5,6,7,0,1,2]"),"."),(0,i.yg)("p",null,"Given the array\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0",(0,i.yg)("strong",{parentName:"p"},"after"),"\xa0the possible rotation and an integer\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"target"),", return\xa0",(0,i.yg)("em",{parentName:"p"},"the index of"),"\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"target"),"\xa0",(0,i.yg)("em",{parentName:"p"},"if it is in"),"\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),(0,i.yg)("em",{parentName:"p"},", or"),"\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"-1"),"\xa0",(0,i.yg)("em",{parentName:"p"},"if it is not in"),"\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.yg)("p",null,"You must write an algorithm with\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"O(log n)"),"\xa0runtime complexity."),(0,i.yg)("h2",{id:"solution"},"Solution"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Check whether the range from left to mid or mid to right is sorted."),(0,i.yg)("li",{parentName:"ol"},"Confirm if the target is within the sorted range and adjust the edge points accordingly."),(0,i.yg)("li",{parentName:"ol"},"If the left to middle section is sorted, check if the target is within this section. If yes, move the right edge point toward the mid by one (i.e., ",(0,i.yg)("inlineCode",{parentName:"li"},"right = mid - 1"),"). If not, adjust the left edge point (",(0,i.yg)("inlineCode",{parentName:"li"},"left = mid + 1"),")."),(0,i.yg)("li",{parentName:"ol"},"Repeat the same process if the middle to the right section is sorted."),(0,i.yg)("li",{parentName:"ol"},"Note that a crucial boundary condition is when the value of the left is equal to the value at the middle."),(0,i.yg)("li",{parentName:"ol"},"Consider the array length shrinking to 2 elements because the mid is calculated using floor division."),(0,i.yg)("li",{parentName:"ol"},"If the target is not found, return -1.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function search(nums: number[], target: number): number {\n  let left = 0;\n  let right = nums.length - 1;\n\n  // Continue the loop while the left pointer is less than or equal to the right pointer\n  while (left <= right) {\n    // Calculate the middle index by flooring the average of left and right\n    const mid = ((left + right) / 2) | 0;\n\n    // Check if the middle element is the target\n    if (nums[mid] === target) {\n      return mid;\n    }\n    // If the left to middle section is sorted\n    if (nums[left] <= nums[mid]) {\n      // Check if the target is within the left to middle section\n      if (nums[left] <= target && target < nums[mid]) {\n        right = mid - 1; // If yes, move the right pointer just before the middle index\n      } else {\n        left = mid + 1; // If not, move the left pointer beyond the middle index\n      }\n    // If the middle to right section is sorted\n    } else {\n      // Check if the target is within the middle to right section\n      if (nums[mid] < target && target <= nums[right]) {\n        left = mid + 1; // If yes, move the left pointer beyond the middle index\n      } else {\n        right = mid - 1; // If not, move the right pointer just before the middle index\n      }\n    }\n  }\n\n  return -1;\n};\n")))}c.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>u});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=d(n),h=i,u=p["".concat(s,".").concat(h)]||p[h]||c[h]||a;return n?r.createElement(u,o(o({ref:t},m),{},{components:n})):r.createElement(u,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);