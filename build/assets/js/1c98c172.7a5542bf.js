"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[2883],{3260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(8168),i=(n(6540),n(5680));const r={},o="155.\xa0Min Stack",l={unversionedId:"Stack/Min Stack",id:"Stack/Min Stack",title:"155.\xa0Min Stack",description:"155.\xa0Min Stack",source:"@site/docs/Stack/155.\xa0Min Stack.md",sourceDirName:"Stack",slug:"/Stack/Min Stack",permalink:"/AlgorithmNEnglishQuests/docs/Stack/Min Stack",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Stack/155.\xa0Min Stack.md",tags:[],version:"current",sidebarPosition:155,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"150.\xa0Evaluate\xa0Reverse\xa0Polish Notation",permalink:"/AlgorithmNEnglishQuests/docs/Stack/Evaluate\xa0Reverse\xa0Polish Notation"},next:{title:"225.\xa0Implement\xa0Stack using Queues",permalink:"/AlgorithmNEnglishQuests/docs/Stack/Implement\xa0Stack using Queues"}},s={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],m={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"155min-stack"},"155.\xa0Min Stack"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/min-stack/"},"155.\xa0Min Stack")),(0,i.yg)("h2",{id:"problem"},"Problem"),(0,i.yg)("p",null,"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time."),(0,i.yg)("p",null,"Implement the\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"MinStack"),"\xa0class:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"MinStack()"),"\xa0initializes the stack object."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"void push(int val)"),"\xa0pushes the element\xa0",(0,i.yg)("inlineCode",{parentName:"li"},"val"),"\xa0onto the stack."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"void pop()"),"\xa0removes the element on the top of the stack."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"int top()"),"\xa0gets the top element of the stack."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"int getMin()"),"\xa0retrieves the minimum element in the stack.")),(0,i.yg)("p",null,"You must implement a solution with\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"O(1)"),"\xa0time complexity for each function."),(0,i.yg)("h2",{id:"solution"},"Solution"),(0,i.yg)("p",null,"To design a ",(0,i.yg)("inlineCode",{parentName:"p"},"MinStack")," structure, we use two arrays. One array serves as the main stack, where we put our values. The second array keeps track of the corresponding minimum values. When we push a number onto the main stack, we compare it with the current minimum value in the ",(0,i.yg)("inlineCode",{parentName:"p"},"minStack")," at the corresponding position. If the new value is smaller than the current minimum, we update the ",(0,i.yg)("inlineCode",{parentName:"p"},"minStack")," with this new minimum. Therefore, each element in the ",(0,i.yg)("inlineCode",{parentName:"p"},"minStack")," represents the minimum value at the corresponding position in the main stack."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"class MinStack {\n    // Initialize two stacks: one for values and one for minimum values\n    private stack: number[] = [];\n    private minStack: number[] = [];\n\n    constructor() {}\n\n    // Push a value onto the stack\n    push(val: number): void {\n        this.stack.push(val);\n        // Update the minStack with the minimum value seen so far\n        this.minStack.push(\n            this.minStack.length === 0\n                ? val\n                : Math.min(this.minStack[this.minStack.length - 1], val)\n        );\n    }\n\n    // Pop the top value from the stack\n    pop(): void {\n        this.stack.pop();\n        // Also remove the corresponding minimum value from minStack\n        this.minStack.pop();\n    }\n\n    // Get the top value of the stack without removing it\n    top(): number {\n        return this.stack[this.stack.length - 1];\n    }\n\n    // Get the minimum value in the stack\n    getMin(): number {\n        return this.minStack[this.minStack.length - 1];\n    }\n}\n\n")))}p.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,g=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);