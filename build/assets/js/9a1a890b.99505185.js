"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[6928],{2360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(8168),o=(t(6540),t(5680));const a={},i="[283.\xa0Move Zeroes](https://leetcode.com/problems/move-zeroes/)",l={unversionedId:"Array/Move Zeroes",id:"Array/Move Zeroes",title:"[283.\xa0Move Zeroes](https://leetcode.com/problems/move-zeroes/)",description:"Given an integer array\xa0nums, move all\xa00's to the end of it while maintaining the relative order of the non-zero elements.",source:"@site/docs/Array/283. Move Zeroes.md",sourceDirName:"Array",slug:"/Array/Move Zeroes",permalink:"/docs/Array/Move Zeroes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/283. Move Zeroes.md",tags:[],version:"current",sidebarPosition:283,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[238.\xa0Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)",permalink:"/docs/Array/Product of Array Except Self"},next:{title:"[344.\xa0Reverse String](https://leetcode.com/problems/reverse-string/)",permalink:"/docs/Array/Reverse String"}},s={},p=[{value:"Solution",id:"solution",level:2},{value:"Two-pointer Approach Visualization:",id:"two-pointer-approach-visualization",level:3},{value:"Idea:",id:"idea",level:4},{value:"Visualization:",id:"visualization",level:4},{value:"Code:",id:"code",level:4},{value:"Explanation:",id:"explanation",level:4},{value:"My Words",id:"my-words",level:2}],m={toc:p},y="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(y,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"283move-zeroes"},(0,o.yg)("a",{parentName:"h1",href:"https://leetcode.com/problems/move-zeroes/"},"283.\xa0Move Zeroes")),(0,o.yg)("p",null,"Given an integer array\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"nums"),", move all\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"0"),"'s to the end of it while maintaining the relative order of the non-zero elements."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Note"),"\xa0that you must do this in-place without making a copy of the array."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Example 1:")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Input:")," nums = ","[0,1,0,3,12]","\n",(0,o.yg)("strong",{parentName:"p"},"Output:")," ","[1,3,12,0,0]"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Example 2:")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Input:")," nums = ","[0]","\n",(0,o.yg)("strong",{parentName:"p"},"Output:")," ","[0]"),(0,o.yg)("h2",{id:"solution"},"Solution"),(0,o.yg)("h3",{id:"two-pointer-approach-visualization"},"Two-pointer Approach Visualization:"),(0,o.yg)("h4",{id:"idea"},"Idea:"),(0,o.yg)("p",null,"We use two pointers: one (",(0,o.yg)("inlineCode",{parentName:"p"},"slow"),") to point to the location where the next non-zero element should be placed and another (",(0,o.yg)("inlineCode",{parentName:"p"},"fast"),") to scan through the array for non-zero elements."),(0,o.yg)("h4",{id:"visualization"},"Visualization:"),(0,o.yg)("p",null,"Consider the array ",(0,o.yg)("inlineCode",{parentName:"p"},"nums = [0, 1, 0, 3, 12]"),"."),(0,o.yg)("p",null,"Initial State:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"nums:   0   1   0   3   12\n        ^   ^\n       slow fast\n")),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Both pointers start at the first element. If ",(0,o.yg)("inlineCode",{parentName:"p"},"fast")," points to ",(0,o.yg)("inlineCode",{parentName:"p"},"0"),", it simply moves ahead, and ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," remains in its place.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Once ",(0,o.yg)("inlineCode",{parentName:"p"},"fast")," finds a non-zero, it assigns its value to ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," and moves ahead, and ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," also moves one step."))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"nums:   1   1   0   3   12\n            ^   ^\n           slow fast\n")),(0,o.yg)("ol",{start:3},(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Now, ",(0,o.yg)("inlineCode",{parentName:"p"},"fast")," finds another zero and continues moving forward.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"Fast")," finds a ",(0,o.yg)("inlineCode",{parentName:"p"},"3")," which is non-zero. It assigns its value to ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," and both pointers move forward."))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"nums:   1   3   0   3   12\n                ^   ^\n               slow fast\n")),(0,o.yg)("ol",{start:5},(0,o.yg)("li",{parentName:"ol"},"Finally, ",(0,o.yg)("inlineCode",{parentName:"li"},"fast")," finds ",(0,o.yg)("inlineCode",{parentName:"li"},"12"),", assigns its value to ",(0,o.yg)("inlineCode",{parentName:"li"},"slow"),", and moves to the end of the array. ",(0,o.yg)("inlineCode",{parentName:"li"},"Slow")," also increments.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"nums:   1   3   12  3   12\n                    ^   \n                   slow\n")),(0,o.yg)("ol",{start:6},(0,o.yg)("li",{parentName:"ol"},"Now, we know any element after ",(0,o.yg)("inlineCode",{parentName:"li"},"slow")," should be set to zero. Therefore, we fill the remaining part of the array with zeros:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"nums:   1   3   12  0   0\n")),(0,o.yg)("h4",{id:"code"},"Code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"var moveZeroes = function(nums) {  \n    var slow = 0;  \n    var fast = 0;  \n      \n    while (fast < nums.length) {  \n          \n        if (nums[fast] !== 0) {  \n            [nums[slow], nums[fast]] = [nums[fast], nums[slow]];  \n            slow++;  \n        }  \n        fast++;  \n    }  \n};\n")),(0,o.yg)("h4",{id:"explanation"},"Explanation:"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"fast")," pointer identifies non-zero elements and the ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," pointer keeps track of where the next non-zero should be placed. After placing all non-zeros correctly using the two pointers, we fill the remainder of the array with zeros. The approach ensures each non-zero element is only moved once (optimal in terms of the number of operations)."),(0,o.yg)("h2",{id:"my-words"},"My Words"),(0,o.yg)("p",null,"This problem requires us to modify the ",(0,o.yg)("inlineCode",{parentName:"p"},"nums")," array in-place. To achieve this, we can use a two-pointer approach. We employ one ",(0,o.yg)("inlineCode",{parentName:"p"},"fast")," pointer to iterate through each",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," pointer points to the position where the next non-zero element should be placed. If ",(0,o.yg)("inlineCode",{parentName:"p"},"nums[fast]")," is not ",(0,o.yg)("inlineCode",{parentName:"p"},"0"),", we swap ",(0,o.yg)("inlineCode",{parentName:"p"},"nums[fast]")," with ",(0,o.yg)("inlineCode",{parentName:"p"},"nums[slow]")," and then increment the ",(0,o.yg)("inlineCode",{parentName:"p"},"slow")," pointer by one position."))}u.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>g});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),y=p(t),d=o,g=y["".concat(s,".").concat(d)]||y[d]||u[d]||a;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[y]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);