"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[6024],{2630:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(8168),o=(r(6540),r(5680));const a={},i="572.\xa0Subtree of Another Tree",s={unversionedId:"trees/Subtree of Another Tree",id:"trees/Subtree of Another Tree",title:"572.\xa0Subtree of Another Tree",description:"572.\xa0Subtree of Another Tree",source:"@site/docs/trees/572.\xa0Subtree of Another Tree.md",sourceDirName:"trees",slug:"/trees/Subtree of Another Tree",permalink:"/docs/trees/Subtree of Another Tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/572.\xa0Subtree of Another Tree.md",tags:[],version:"current",sidebarPosition:572,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"543.\xa0Diameter\xa0of Binary Tree",permalink:"/docs/trees/Diameter\xa0of Binary Tree"},next:{title:"617. Merge Two Binary Trees",permalink:"/docs/trees/Merge Two Binary Trees"}},l={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],p={toc:u},c="wrapper";function f(e){let{components:t,...r}=e;return(0,o.yg)(c,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"572subtree-of-another-tree"},"572.\xa0Subtree of Another Tree"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/subtree-of-another-tree/"},"572.\xa0Subtree of Another Tree")),(0,o.yg)("h2",{id:"problem"},"Problem"),(0,o.yg)("p",null,"Given the roots of two binary trees\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"root"),"\xa0and\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot"),", return\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"true"),"\xa0if there is a subtree of\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"root"),"\xa0with the same structure and node values of ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot"),"\xa0and\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"false"),"\xa0otherwise."),(0,o.yg)("p",null,"A subtree of a binary tree\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"tree"),"\xa0is a tree that consists of a node in\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"tree"),"\xa0and all of this node's descendants. The tree\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"tree"),"\xa0could also be considered as a subtree of itself."),(0,o.yg)("h2",{id:"solution"},"Solution"),(0,o.yg)("p",null,"To check if one tree is a subtree of another tree. We use a helper function ",(0,o.yg)("inlineCode",{parentName:"p"},"isSameTree")," to compare two trees. First, we check if ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," is null because a null tree is always a subtree. If ",(0,o.yg)("inlineCode",{parentName:"p"},"root")," is null, then ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," cannot be a subtree, so we return false. The ",(0,o.yg)("inlineCode",{parentName:"p"},"isSameTree")," function checks if two trees are the same. If both nodes are null, we return true. If both nodes are not null and their values are equal, we recursively check both left and right subtrees. If ",(0,o.yg)("inlineCode",{parentName:"p"},"root")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," are the same, we return true. If not, we check if ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," is the same as the left or right subtree of ",(0,o.yg)("inlineCode",{parentName:"p"},"root"),". We keep checking until we find ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"root")," or we've checked all subtrees. So, we are comparing each subtree of the main tree with ",(0,o.yg)("inlineCode",{parentName:"p"},"subRoot")," to check if there's a match."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"function isSubtree(root: TreeNode | null, subRoot: TreeNode | null): boolean {\n  if (subRoot === null) return true;\n  if (root === null) return false;\n\n  function isSameTree(s: TreeNode | null, t: TreeNode | null) {\n    if (s === null && t === null) {\n      return true;\n    }\n\n    if (s && t && s.val === t.val) {\n      return isSameTree(s.left, t.left) && isSameTree(s.right, t.right);\n    }\n\n    return false;\n  }\n\n  if (isSameTree(root, subRoot)) {\n    return true;\n  }\n\n  return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);\n};\n")))}f.isMDXComponent=!0},5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>m});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),d=o,m=c["".concat(l,".").concat(d)]||c[d]||f[d]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);