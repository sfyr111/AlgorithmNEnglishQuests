"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[9110],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=a,d=m["".concat(p,".").concat(c)]||m[c]||y[c]||o;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(8168),a=(t(6540),t(5680));const o={},i="26. Remove Duplicates from Sorted Array",l={unversionedId:"Array/Remove Duplicates from Sorted Array",id:"Array/Remove Duplicates from Sorted Array",title:"26. Remove Duplicates from Sorted Array",description:"Problem",source:"@site/docs/Array/26. Remove Duplicates from Sorted Array.md",sourceDirName:"Array",slug:"/Array/Remove Duplicates from Sorted Array",permalink:"/docs/Array/Remove Duplicates from Sorted Array",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/26. Remove Duplicates from Sorted Array.md",tags:[],version:"current",sidebarPosition:26,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Valid",permalink:"/docs/Array/Valid Palindrome"},next:{title:"Remove Duplicates from Sorted Array",permalink:"/docs/Array/Remove Duplicates from Sorted Array"}},p={},s=[{value:"Problem",id:"problem",level:2},{value:"Idea",id:"idea",level:2},{value:"Solution",id:"solution",level:2}],u={toc:s},m="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"26-remove-duplicates-from-sorted-array"},"26. Remove Duplicates from Sorted Array"),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given an integer array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0sorted in\xa0",(0,a.yg)("strong",{parentName:"p"},"non-decreasing order"),", remove the duplicates\xa0",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/In-place_algorithm"},(0,a.yg)("strong",{parentName:"a"},"in-place")),"\xa0such that each\xa0unique\xa0element appears only\xa0",(0,a.yg)("strong",{parentName:"p"},"once"),". The\xa0",(0,a.yg)("strong",{parentName:"p"},"relative order"),"\xa0of the elements should be kept the\xa0",(0,a.yg)("strong",{parentName:"p"},"same"),". Then return\xa0",(0,a.yg)("em",{parentName:"p"},"the number of\xa0unique\xa0elements in"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.yg)("p",null,"Consider\xa0the number of\xa0unique\xa0elements of\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0to be\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"k"),", to get\xa0accepted, you need to do the following things:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Change the array\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"nums"),"\xa0such that the first\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"k"),"\xa0elements of\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"nums"),"\xa0contain the\xa0unique\xa0elements in the order they were\xa0present\xa0in\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"nums"),"\xa0initially. The remaining elements of\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"nums"),"\xa0are not important as well as the size of\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"nums"),"."),(0,a.yg)("li",{parentName:"ul"},"Return\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"k"),".")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Custom Judge:")),(0,a.yg)("p",null,"The judge will test your solution with the following code:"),(0,a.yg)("p",null,"int[] nums = ","[...]","; // Input array\nint[] expectedNums = ","[...]","; // The expected answer with correct length"),(0,a.yg)("p",null,"int k = removeDuplicates(nums); // Calls your implementation"),(0,a.yg)("p",null,"assert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\nassert nums","[i]"," == expectedNums","[i]",";\n}"),(0,a.yg)("p",null,"If all assertions pass, then your solution will be\xa0",(0,a.yg)("strong",{parentName:"p"},"accepted"),"."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," nums = ","[1,1,2]","\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," 2, nums = ","[1,2,_]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," nums = ","[0,0,1,1,1,2,2,3,3,4]","\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," 5, nums = ","[0,1,2,3,4,",(0,a.yg)("em",{parentName:"p"},","),",",(0,a.yg)("em",{parentName:"p"},","),",_]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."),(0,a.yg)("h2",{id:"idea"},"Idea"),(0,a.yg)("p",null,"This problem gives a sorted array ",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),". We must remove duplicates in-place without extra space. The best approach uses two pointers."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"We use two pointers called ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"j"),". Pointer ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," tracks the last position of unique numbers. while ",(0,a.yg)("inlineCode",{parentName:"p"},"j")," iterates over the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. if ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[i]")," is different from ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[j]"),". We increment ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," by one and put the value of ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[j]")," into ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[i]"),"  . At the end, all numbers before the position ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," are unique and sorted, The length of this unique section is ",(0,a.yg)("inlineCode",{parentName:"p"},"i + 1")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"const removeDuplicates = function(nums) {\n    if (nums.length === 0) return 0;\n\n    let i = 0;\n    for (let j = 1; j < nums.length; j++) {\n        if (nums[i] !== nums[j]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}\n")))}y.isMDXComponent=!0}}]);