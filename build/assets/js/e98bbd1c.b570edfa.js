"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[3689],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),h=i,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(8168),i=(n(6540),n(5680));const o={},a="15.\xa03Sum",l={unversionedId:"two pointers/3Sum",id:"two pointers/3Sum",title:"15.\xa03Sum",description:"15.\xa03Sum",source:"@site/docs/two pointers/15.\xa03Sum.md",sourceDirName:"two pointers",slug:"/two pointers/3Sum",permalink:"/AlgorithmNEnglishQuests/docs/two pointers/3Sum",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/two pointers/15.\xa03Sum.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"11.\xa0Container With Most Water",permalink:"/AlgorithmNEnglishQuests/docs/two pointers/Container With Most Water"}},s={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.yg)(m,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"153sum"},"15.\xa03Sum"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/3sum/"},"15.\xa03Sum")),(0,i.yg)("h2",{id:"problem"},"Problem"),(0,i.yg)("p",null,"Given an integer array nums, return all the triplets\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"[nums[i], nums[j], nums[k]]"),"\xa0such that\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"i != j"),",\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"i != k"),", and\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"j != k"),", and\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"nums[i] + nums[j] + nums[k] == 0"),"."),(0,i.yg)("p",null,"Notice that the solution set must not contain duplicate triplets."),(0,i.yg)("h2",{id:"solution"},"Solution"),(0,i.yg)("p",null,"To solve the threeSum problem, we start by sorting ",(0,i.yg)("inlineCode",{parentName:"p"},"nums"),". Then, we iterate through the array, skipping duplicates. For each unique element, we apply a two-pointer approach: setting the current element as ",(0,i.yg)("inlineCode",{parentName:"p"},"nums[i]"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"left")," as ",(0,i.yg)("inlineCode",{parentName:"p"},"nums[i + 1]"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"right")," at the end. We move ",(0,i.yg)("inlineCode",{parentName:"p"},"left")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"right")," towards each other, calculating the sum of the triplet at each step. If the sum is greater than 0, we move ",(0,i.yg)("inlineCode",{parentName:"p"},"right")," leftwards. If it's less than 0, we shift ",(0,i.yg)("inlineCode",{parentName:"p"},"left")," rightwards. When the sum equals 0, we add the triplet to ",(0,i.yg)("inlineCode",{parentName:"p"},"res")," and advance ",(0,i.yg)("inlineCode",{parentName:"p"},"left")," to the next unique element, avoiding duplicates. This process is repeated until ",(0,i.yg)("inlineCode",{parentName:"p"},"left")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"right")," meet. Finally, we return ",(0,i.yg)("inlineCode",{parentName:"p"},"res"),", containing all unique triplets that sum to 0.\nThe time complexity is ","(","O(n^2)",")"," due to sorting (","(","O(n \\log n)",")",") and the nested loops for the two-pointer search."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"class Solution {\n    // The threeSum function aims to find all unique triplets in the array that sum up to zero.\n    threeSum(nums: number[]): number[][] {\n        // This will store the resulting triplets.\n        let res: number[][] = [];\n        // Sort the array in non-decreasing order.\n        nums.sort((a, b) => a - b);\n\n        // Iterate through the array, treating each number as the first number of a potential triplet.\n        for (let i = 0; i < nums.length; i++) {\n            // Skip over duplicates to ensure uniqueness of triplets.\n            if (i > 0 && nums[i] === nums[i - 1]) continue;\n\n            // Initialize two pointers: one after the current element, and one at the end of the array.\n            let l = i + 1;\n            let r = nums.length - 1;\n\n            // Continue looking for triplets while the left pointer is less than the right pointer.\n            while (l < r) {\n                // Calculate the sum of the current triplet.\n                let threeSum = nums[i] + nums[l] + nums[r];\n                \n                // If the sum is greater than zero, decrement the right pointer to reduce the sum.\n                if (threeSum > 0) {\n                    r--;\n                // If the sum is less than zero, increment the left pointer to increase the sum.\n                } else if (threeSum < 0) {\n                    l++;\n                // If the sum is zero, we found a valid triplet.\n                } else {\n                    // Add the triplet to the result array.\n                    res.push([nums[i], nums[l], nums[r]]);\n                    // Increment the left pointer and skip over any duplicates.\n                    l++;\n                    while (l < r && nums[l] === nums[l - 1]) {\n                        l++;\n                    }\n                }\n            }\n        }\n        // Return the array of triplets that sum up to zero.\n        return res;\n    }\n}\n\n")))}c.isMDXComponent=!0}}]);