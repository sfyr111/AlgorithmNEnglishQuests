"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[9189],{5680:(e,r,t)=>{t.d(r,{xA:()=>s,yg:()=>y});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function u(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),m=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):u(u({},r),e)),t},s=function(e){var r=m(e.components);return n.createElement(c.Provider,{value:r},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),l=m(t),d=a,y=l["".concat(c,".").concat(d)]||l[d]||p[d]||o;return t?n.createElement(y,u(u({ref:r},s),{},{components:t})):n.createElement(y,u({ref:r},s))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=d;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[l]="string"==typeof e?e:a,u[1]=i;for(var m=2;m<o;m++)u[m]=t[m];return n.createElement.apply(null,u)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6862:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=t(8168),a=(t(6540),t(5680));const o={},u="152. Maximum Product Subarray",i={unversionedId:"dynamic/Maximum Product Subarray",id:"dynamic/Maximum Product Subarray",title:"152. Maximum Product Subarray",description:"152. Maximum Product Subarray",source:"@site/docs/dynamic/152. Maximum Product Subarray.md",sourceDirName:"dynamic",slug:"/dynamic/Maximum Product Subarray",permalink:"/docs/dynamic/Maximum Product Subarray",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dynamic/152. Maximum Product Subarray.md",tags:[],version:"current",sidebarPosition:152,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"139. Word Break",permalink:"/docs/dynamic/Word Break"},next:{title:"198. House Robber",permalink:"/docs/dynamic/House Robber"}},c={},m=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],s={toc:m},l="wrapper";function p(e){let{components:r,...t}=e;return(0,a.yg)(l,(0,n.A)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"152-maximum-product-subarray"},"152. Maximum Product Subarray"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-product-subarray/"},"152. Maximum Product Subarray")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given an integer array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),", find a\xa0subarray that has the largest product, and return\xa0",(0,a.yg)("em",{parentName:"p"},"the product"),".\nThe test cases are generated so that the answer will fit in a\xa0",(0,a.yg)("strong",{parentName:"p"},"32-bit"),"\xa0integer."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"We can use dynamic programming to solve this problem. We keep track of the maximum and minimum product at each position in the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array to handle negative numbers and zeros. We reset the subarray product when the current value is higher than the current maximum product or less than the current minimum product. Because the previous cumulative product is not what we need. So we need to calculate again at the current position."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function maxProduct(nums: number[]): number {\n    let res = Math.max(...nums);\n    let curMax = 1;\n    let curMin = 1;\n\n    for (let n of nums) {\n        // if (n === 0) {\n        //  curMax = 1;\n        //  curMin = 1;\n        //  continue;\n        // }\n        const cMax = n * curMax\n        curMax = Math.max(cMax, n * curMin, n);\n        curMin = Math.min(cMax, n * curMin, n);\n        res = Math.max(curMax, res);\n    }\n\n    return res;\n};\n")))}p.isMDXComponent=!0}}]);