"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[9409],{194:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/longeset-increasing-subsequance-defb4c67d95ad1c811659971b4de6237.png"},5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>h});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,h=p["".concat(l,".").concat(m)]||p[m]||g[m]||i;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7925:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=t(8168),r=(t(6540),t(5680));const i={},o="300. Longest Increasing Subsequence",s={unversionedId:"dynamic/Longest Increasing Subsequence",id:"dynamic/Longest Increasing Subsequence",title:"300. Longest Increasing Subsequence",description:"300. Longest Increasing Subsequence",source:"@site/docs/dynamic/300. Longest Increasing Subsequence.md",sourceDirName:"dynamic",slug:"/dynamic/Longest Increasing Subsequence",permalink:"/docs/dynamic/Longest Increasing Subsequence",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dynamic/300. Longest Increasing Subsequence.md",tags:[],version:"current",sidebarPosition:300,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"213. House Robber II",permalink:"/docs/dynamic/House Robber II"},next:{title:"322. Coin Change",permalink:"/docs/dynamic/Coin Change"}},l={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Be better",id:"be-better",level:2}],c={toc:u},p="wrapper";function g(e){let{components:n,...i}=e;return(0,r.yg)(p,(0,a.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"300-longest-increasing-subsequence"},"300. Longest Increasing Subsequence"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-increasing-subsequence/"},"300. Longest Increasing Subsequence")),(0,r.yg)("h2",{id:"problem"},"Problem"),(0,r.yg)("p",null,"Given an integer array\xa0",(0,r.yg)("inlineCode",{parentName:"p"},"nums"),", return\xa0",(0,r.yg)("em",{parentName:"p"},"the length of the longest\xa0",(0,r.yg)("strong",{parentName:"em"},"strictly increasing"))," ",(0,r.yg)("em",{parentName:"p"},(0,r.yg)("strong",{parentName:"em"},"subsequence"))),(0,r.yg)("p",null,"A\xa0",(0,r.yg)("strong",{parentName:"p"},"subsequence"),"\xa0is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements."),(0,r.yg)("h2",{id:"solution"},"Solution"),(0,r.yg)("p",null,"To solve this problem, we introduce a dynamic programming approach. We will break it down into smaller tasks to find the longest increasing subsequence in the whole array.  For each position in the whole array, calculate the longest subsequence at each position to the last position and record. Therefore, we can compare these records to find the longest increasing subsequence in the entire array."),(0,r.yg)("p",null,"First, we make an array called LIS with the same length as ",(0,r.yg)("inlineCode",{parentName:"p"},"nums"),", fill 1. Each element ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[i]")," represents the longest subsequence of position I to the last position in the array.\nThen, we iterate through the array backward. Use two nested loop update ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS")," arrays. The outside loop variable ",(0,r.yg)("inlineCode",{parentName:"p"},"i")," represents the current position, and the inside loop variable ",(0,r.yg)("inlineCode",{parentName:"p"},"j")," begins ",(0,r.yg)("inlineCode",{parentName:"p"},"i + 1")," and iterates through the I after all elements."),(0,r.yg)("p",null,"If we meet ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[i]")," less than the ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[j]"),", then mean nums","[j]"," and nums","[i]"," can make an increasing subsequence. So, we update the greater value between  ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[i]")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[j] + 1"),". Such that we can ensure LIS","[i]"," is the longest subsequence at I to the last position so far.\nUntill all loop endings, we find the maximum value in the ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS")," array. It's the longest increasing subsequence of the whole array."),(0,r.yg)("p",null,"Through this process, we not only avoided the duplicate calculation, and solved it effectively."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"longeset-increasing-subsequance",src:t(194).A,width:"1431",height:"712"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"function lengthOfLIS(nums: number[]): number {  \n  let LIS = new Array(nums.length).fill(1);  \n  \n  for (let i = LIS.length - 1; i >= 0; i--) {  \n    for (let j = i + 1; j < nums.length; j++) {  \n      if (nums[i] < nums[j]) {  \n        LIS[i] = Math.max(LIS[i], 1 + LIS[j]);  \n      }  \n    }  \n  }  \n  \n  return Math.max(...LIS);  \n};\n")),(0,r.yg)("h2",{id:"be-better"},"Be better"),(0,r.yg)("p",null,'"To solve the Longest Increasing Subsequence problem, we use a dynamic programming strategy. This method breaks down the main problem into smaller, manageable tasks, where we calculate the maximum length of an increasing subsequence from each position in the array to the end. We keep track of these lengths in an array called LIS.'),(0,r.yg)("p",null,"Here's how we do it:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Initialize the LIS array with the same length as ",(0,r.yg)("inlineCode",{parentName:"p"},"nums"),", filled with 1s. Each element ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[i]")," represents the longest subsequence starting at position ",(0,r.yg)("inlineCode",{parentName:"p"},"i"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Loop through the ",(0,r.yg)("inlineCode",{parentName:"p"},"nums")," array from back to front. For each position ",(0,r.yg)("inlineCode",{parentName:"p"},"i"),", compare it with every other position ",(0,r.yg)("inlineCode",{parentName:"p"},"j")," that comes after ",(0,r.yg)("inlineCode",{parentName:"p"},"i"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"If ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[i]")," is less than ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[j]"),", it means that ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[i]")," can be part of an increasing subsequence ending with ",(0,r.yg)("inlineCode",{parentName:"p"},"nums[j]"),". Update ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[i]")," to the maximum of its current value or the value of ",(0,r.yg)("inlineCode",{parentName:"p"},"LIS[j] + 1")," to extend the subsequence.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"After updating all positions, the maximum value in the LIS array gives us the length of the longest increasing subsequence in the entire array."))),(0,r.yg)("p",null,'This approach is efficient because it builds upon previous calculations, ensuring no work is repeated unnecessarily."'))}g.isMDXComponent=!0}}]);