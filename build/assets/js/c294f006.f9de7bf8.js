"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[4695],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),l=u(n),y=a,d=l["".concat(p,".").concat(y)]||l[y]||g[y]||o;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(8168),a=(n(6540),n(5680));const o={},i="[167.\xa0Two Sum II - Input Array Is Sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)",s={unversionedId:"Array/Two Sum II - Input Array Is Sorted",id:"Array/Two Sum II - Input Array Is Sorted",title:"[167.\xa0Two Sum II - Input Array Is Sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)",description:"Given a\xa01-indexed\xa0array of integers\xa0numbers\xa0that is already\xa0_sorted in non-decreasing order_, find two numbers such that they add up to a\xa0specific\xa0target\xa0number. Let these two numbers be\xa0numbers[index1]\xa0and\xa0numbers[index2]\xa0where\xa01 <= index1 < index2 <\xa0numbers.length.",source:"@site/docs/Array/167. Two Sum II - Input Array Is Sorted.md",sourceDirName:"Array",slug:"/Array/Two Sum II - Input Array Is Sorted",permalink:"/AlgorithmNEnglishQuests/docs/Array/Two Sum II - Input Array Is Sorted",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/167. Two Sum II - Input Array Is Sorted.md",tags:[],version:"current",sidebarPosition:167,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"128.\xa0Longest\xa0Consecutive\xa0Sequence",permalink:"/AlgorithmNEnglishQuests/docs/Array/Longest\xa0Consecutive\xa0Sequence"},next:{title:"[209.\xa0Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)",permalink:"/AlgorithmNEnglishQuests/docs/Array/Minimum Size Subarray Sum"}},p={},u=[{value:"Solution",id:"solution",level:2},{value:"My Words",id:"my-words",level:2}],m={toc:u},l="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(l,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"167two-sum-ii---input-array-is-sorted"},(0,a.yg)("a",{parentName:"h1",href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"},"167.\xa0Two Sum II - Input Array Is Sorted")),(0,a.yg)("p",null,"Given a\xa0",(0,a.yg)("strong",{parentName:"p"},"1-indexed"),"\xa0array of integers\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"numbers"),"\xa0that is already\xa0",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"sorted in non-decreasing order")),", find two numbers such that they add up to a\xa0specific\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),"\xa0number. Let these two numbers be\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"numbers[index1]"),"\xa0and\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"numbers[index2]"),"\xa0where\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"1 <= index1 < index2 <\xa0numbers.length"),"."),(0,a.yg)("p",null,"Return\xa0",(0,a.yg)("em",{parentName:"p"},"the indices of the two numbers,"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"index1"),"\xa0",(0,a.yg)("em",{parentName:"p"},"and"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"index2"),(0,a.yg)("em",{parentName:"p"},",\xa0",(0,a.yg)("strong",{parentName:"em"},"added by one"),"\xa0as an integer array"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"[index1, index2]"),"\xa0",(0,a.yg)("em",{parentName:"p"},"of length 2.")),(0,a.yg)("p",null,"The tests are generated such that there is\xa0",(0,a.yg)("strong",{parentName:"p"},"exactly\xa0one solution"),". You\xa0",(0,a.yg)("strong",{parentName:"p"},"may not"),"\xa0use the same element twice."),(0,a.yg)("p",null,"Your solution must use only constant\xa0extra\xa0space."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," numbers = ","[2,7,11,15]",", target = 9\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[1,2]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return ","[1, 2]","."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," numbers = ","[2,3,4]",", target = 6\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[1,3]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return ","[1, 3]","."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 3:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," numbers = ","[-1,0]",", target = -1\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[1,2]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return ","[1, 2]","."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"function twoSum2(numbers: number[], target: number): number[] {  \n  let left = 0;  \n  let right = numbers.length - 1;  \n  \n  while (left < right) {  \n    const sum = numbers[left] + numbers[right];  \n  \n    if (sum === target) {  \n      return [left + 1, right + 1];  \n    } else if (target > sum) { // numbers is sorted  \n      left++;  \n    } else if (target < sum) {  \n      right--;  \n    }  \n  }  \n  return [];  \n};\n")),(0,a.yg)("h2",{id:"my-words"},"My Words"),(0,a.yg)("p",null,"Since the array is sorted, we can use a two-pointer approach, a pointer ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," at the beginning and a pointer ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," at the end of the array. While ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," is less than ",(0,a.yg)("inlineCode",{parentName:"p"},"right"),", calculate the sum of ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[left]")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[right]"),". If the sum matches the target, return the positions of two pointers. If the sum is less than the target, increment the ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," pointer. Otherwise, decrement the ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," pointer. Continue this until the pointers meet. If no match is found, return an empty pair.  The time complexity of this approach is ",(0,a.yg)("inlineCode",{parentName:"p"},"O(n)"),", where n is the length of the array, as we move the two pointers through the array at most once. The space complexity is ",(0,a.yg)("inlineCode",{parentName:"p"},"O(1)")," as we only use a constant space. But, we can use a hash-table approach. The time complexity of this method is ",(0,a.yg)("inlineCode",{parentName:"p"},"O(n)"),", and its space complexity is ",(0,a.yg)("inlineCode",{parentName:"p"},"O(n)")," as the hash-table uses an extra space."))}g.isMDXComponent=!0}}]);