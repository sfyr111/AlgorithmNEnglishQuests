"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[4422],{5680:(e,t,r)=>{r.d(t,{xA:()=>s,yg:()=>g});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||o;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6097:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(8168),a=(r(6540),r(5680));const o={},i="55. Jump Game",l={unversionedId:"greedy/Jump Game",id:"greedy/Jump Game",title:"55. Jump Game",description:"55. Jump Game",source:"@site/docs/greedy/55. Jump Game.md",sourceDirName:"greedy",slug:"/greedy/Jump Game",permalink:"/docs/greedy/Jump Game",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/greedy/55. Jump Game.md",tags:[],version:"current",sidebarPosition:55,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Maximum Subarray",permalink:"/docs/greedy/Maximum Subarray"},next:{title:"2.\xa0Add Two Numbers",permalink:"/docs/linklist/Add Two Numbers"}},u={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Be better",id:"be-better",level:2}],s={toc:p},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.yg)(m,(0,n.A)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"55-jump-game"},"55. Jump Game"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/jump-game/"},"55. Jump Game")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"You are given an integer array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),". You are initially positioned at the array's\xa0",(0,a.yg)("strong",{parentName:"p"},"first\xa0index"),", and each element in the array represents your\xa0maximum\xa0jump length at that position."),(0,a.yg)("p",null,"Return\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"\xa0",(0,a.yg)("em",{parentName:"p"},"if you can reach the last\xa0index, or"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"\xa0",(0,a.yg)("em",{parentName:"p"},"otherwise"),"."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"To solve this problem, we can iterate backward to the start position at the end. We use a variable called a goal; we update the goal each iteration to the current index; if the current index value adds, the current index can reach the goal.  When iterated entire array, the goal equals the first element, then return true."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function canJump(nums: number[]): boolean {\n    let goal = nums.length - 1;\n    \n    for (let i = nums.length - 1; i >= 0; i--) {\n        if (i + nums[i] >= goal) {\n            goal = i;\n        }\n    }\n\n    return goal === 0;\n}\n")),(0,a.yg)("h2",{id:"be-better"},"Be better"),(0,a.yg)("p",null,'To solve the "Can Jump" problem, I use a method where I start from the back of the array and move towards the front. I have a variable named ',(0,a.yg)("inlineCode",{parentName:"p"},"goal")," that represents the index I need to reach, which initially is set to the last index of the array."),(0,a.yg)("p",null,"In each step, I go backwards and check if the current position can jump to the ",(0,a.yg)("inlineCode",{parentName:"p"},"goal"),". If the current index plus its jump value is greater than or equal to the ",(0,a.yg)("inlineCode",{parentName:"p"},"goal"),", then I update the ",(0,a.yg)("inlineCode",{parentName:"p"},"goal")," to this current index."),(0,a.yg)("p",null,"I repeat this until I reach the beginning of the array. If in the end, the ",(0,a.yg)("inlineCode",{parentName:"p"},"goal")," has moved to the starting position, it means it is possible to reach the end of the array from the start, so I return true. Otherwise, if the ",(0,a.yg)("inlineCode",{parentName:"p"},"goal")," is not at the starting position, then I return false."))}c.isMDXComponent=!0}}]);