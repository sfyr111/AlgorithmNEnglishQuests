"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[7446],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(r),d=o,y=h["".concat(s,".").concat(d)]||h[d]||p[d]||a;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8195:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(8168),o=(r(6540),r(5680));const a={},i="701. Insert into a Binary Search Tree",l={unversionedId:"trees/Insert into a Binary Search Tree",id:"trees/Insert into a Binary Search Tree",title:"701. Insert into a Binary Search Tree",description:"701. Insert into a Binary Search Tree",source:"@site/docs/trees/701. Insert into a Binary Search Tree.md",sourceDirName:"trees",slug:"/trees/Insert into a Binary Search Tree",permalink:"/docs/trees/Insert into a Binary Search Tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/701. Insert into a Binary Search Tree.md",tags:[],version:"current",sidebarPosition:701,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"617. Merge Two Binary Trees",permalink:"/docs/trees/Merge Two Binary Trees"},next:{title:"1448.\xa0Count\xa0Good Nodes in Binary Tree",permalink:"/docs/trees/Count\xa0Good Nodes in Binary Tree"}},s={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],c={toc:u},h="wrapper";function p(e){let{components:t,...r}=e;return(0,o.yg)(h,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"701-insert-into-a-binary-search-tree"},"701. Insert into a Binary Search Tree"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/insert-into-a-binary-search-tree/"},"701. Insert into a Binary Search Tree")),(0,o.yg)("h2",{id:"problem"},"Problem"),(0,o.yg)("p",null,"You are given the\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"root"),"\xa0node of a binary search tree (BST) and a\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"value"),"\xa0to insert into the tree. Return\xa0",(0,o.yg)("em",{parentName:"p"},"the root node of the BST after the\xa0insertion"),". It is\xa0",(0,o.yg)("strong",{parentName:"p"},"guaranteed"),"\xa0that the new value does not exist in the\xa0original\xa0BST."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Notice"),"\xa0that there may exist\xa0multiple valid ways for the\xa0insertion, as long as the tree\xa0remains\xa0a BST after\xa0insertion. You can return\xa0",(0,o.yg)("strong",{parentName:"p"},"any of them"),"."),(0,o.yg)("h2",{id:"solution"},"Solution"),(0,o.yg)("p",null,"There are two ways to insert a node into a binary search tree: recursively and iteratively.\nThe recursive solution involves a function that takes the root of the tree and the value to insert. If the root is null, create a new TreeNode with the given value and return it as the new root of the subtree. If the root is not null, compare the value to be inserted with the root's value, and then call the function recursively to insert the value in the left or right subtree. Finally, return the root.\nThe iterative solution involves using a while loop to traverse the tree and find the right spot for insertion. Start with the root. If it's null, create and return a new node with the value. If not, compare the value with the current node's value in each iteration and then move to the left or right child, depending on the comparison. If the child is null, insert the new value here and return the original root."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"function insertIntoBST(root: TreeNode | null, val: number): TreeNode | null {  \n  \n  if (root === null) {  \n    return new TreeNode(val);  \n  }  \n  if (val > root.val) {  \n    root.right = insertIntoBST(root.right, val);  \n  } else {  \n    root.left = insertIntoBST(root.left, val);  \n  }  \n  \n  return root;  \n};\n\nfunction insertIntoBST(root: TreeNode | null, val: number): TreeNode | null {  \n  if (root === null) {  \n    return new TreeNode(val);  \n  }  \n  \n  let curNode = root;  \n  while (true) {  \n    if (val > curNode.val) {  \n      if (curNode.right === null) {  \n        curNode.right = new TreeNode(val);  \n        return root;  \n      }  \n      curNode = curNode.right;  \n    } else {  \n      if (curNode.left === null) {  \n        curNode.left = new TreeNode(val);  \n        return root;  \n      }  \n      curNode = curNode.left;  \n    }  }  \n};\n")))}p.isMDXComponent=!0}}]);