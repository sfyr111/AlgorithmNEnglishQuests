"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[8989],{5509:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=t(8168),i=(t(6540),t(5680));const a={},o="297. Serialize and Deserialize Binary Tree",s={unversionedId:"trees/Serialize and Deserialize Binary Tree",id:"trees/Serialize and Deserialize Binary Tree",title:"297. Serialize and Deserialize Binary Tree",description:"297.\xa0Serialize\xa0and Deserialize Binary Tree",source:"@site/docs/trees/297. Serialize and Deserialize Binary Tree.md",sourceDirName:"trees",slug:"/trees/Serialize and Deserialize Binary Tree",permalink:"/AlgorithmNEnglishQuests/docs/trees/Serialize and Deserialize Binary Tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/297. Serialize and Deserialize Binary Tree.md",tags:[],version:"current",sidebarPosition:297,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"235.\xa0Lowest Common Ancestor of a Binary Search Tree",permalink:"/AlgorithmNEnglishQuests/docs/trees/Lowest Common Ancestor of a Binary Search Tree"},next:{title:"543.\xa0Diameter\xa0of Binary Tree",permalink:"/AlgorithmNEnglishQuests/docs/trees/Diameter\xa0of Binary Tree"}},l={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:c},d="wrapper";function p(e){let{components:r,...t}=e;return(0,i.yg)(d,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"297-serialize-and-deserialize-binary-tree"},"297. Serialize and Deserialize Binary Tree"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"},"297.\xa0Serialize\xa0and Deserialize Binary Tree")),(0,i.yg)("h2",{id:"problem"},"Problem"),(0,i.yg)("p",null,"Serialization is the process of\xa0converting\xa0a data structure or object into a\xa0sequence\xa0of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment."),(0,i.yg)("p",null,"Design an algorithm to\xa0serialize\xa0and deserialize a binary tree. There is no\xa0restriction\xa0on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be\xa0serialized\xa0to a string and this string can be deserialized to the\xa0original\xa0tree structure."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Clarification:"),"\xa0The input/output format is the same as\xa0",(0,i.yg)("a",{parentName:"p",href:"https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-"},"how LeetCode\xa0serializes\xa0a binary tree"),". You do not necessarily need to follow this format, so please be creative and come up with different\xa0approaches\xa0yourself."),(0,i.yg)("h2",{id:"solution"},"Solution"),(0,i.yg)("p",null,"To converting a binary tree into a string and then back to a tree. For 'serialize', we use a process called DFS, short for depth-first search, to go through each node. If a node is null, we add 'N' to our string. If not, we add the node's value. We do this for all nodes and then make a big string from it. For 'deserialize', we turn the string back into a tree. We split the string into parts. If a part is 'N', it means there was no node there, so we do nothing. Otherwise, we make a new node with that number. We do this for every part to rebuild the tree."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function serialize(root: TreeNode | null): string {  \n  const res: string[] = [];  \n  \n  function dfs(node: TreeNode | null) {  \n    if (node === null) {  \n      res.push('N');  \n      return;  \n    }  \n    res.push(node.val.toString());  \n    dfs(node.left);  \n    dfs(node.right);  \n  }  \n  \n  dfs(root);  \n  return res.join();  \n};  \n  \nfunction deserialize(data: string): TreeNode | null {  \n  const vals = data.split(',');  \n  \n  function dfs(): TreeNode | null {  \n    const val = vals.shift();  \n    if (val === 'N') {  \n      return null;  \n    }    const node = new TreeNode(Number(val));  \n  \n    node.left = dfs();  \n    node.right = dfs();  \n    return node;  \n  }  \n  \n  return dfs();  \n};\n\n")))}p.isMDXComponent=!0},5680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>m});var n=t(6540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=i,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return t?n.createElement(m,o(o({ref:r},u),{},{components:t})):n.createElement(m,o({ref:r},u))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);