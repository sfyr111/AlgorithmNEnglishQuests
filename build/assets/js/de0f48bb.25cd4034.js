"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[1016],{5672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(8168),a=(n(6540),n(5680));const i={},o="[209.\xa0Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)",l={unversionedId:"Array/Minimum Size Subarray Sum",id:"Array/Minimum Size Subarray Sum",title:"[209.\xa0Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)",description:"Given an array of positive integers\xa0nums\xa0and a positive integer\xa0target, return\xa0the\xa0**minimal length**\xa0of a\xa0subarray\xa0whose sum is greater than or equal to\xa0target. If there is no such subarray, return\xa00\xa0instead.",source:"@site/docs/Array/209. Minimum Size Subarray Sum.md",sourceDirName:"Array",slug:"/Array/Minimum Size Subarray Sum",permalink:"/AlgorithmNEnglishQuests/docs/Array/Minimum Size Subarray Sum",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/209. Minimum Size Subarray Sum.md",tags:[],version:"current",sidebarPosition:209,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[167.\xa0Two Sum II - Input Array Is Sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)",permalink:"/AlgorithmNEnglishQuests/docs/Array/Two Sum II - Input Array Is Sorted"},next:{title:"[238.\xa0Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)",permalink:"/AlgorithmNEnglishQuests/docs/Array/Product of Array Except Self"}},p={},u=[{value:"Idea",id:"idea",level:2},{value:"Solution",id:"solution",level:2},{value:"My Words",id:"my-words",level:2},{value:"idea",id:"idea-1",level:2},{value:"Solution",id:"solution-1",level:2}],s={toc:u},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"209minimum-size-subarray-sum"},(0,a.yg)("a",{parentName:"h1",href:"https://leetcode.com/problems/minimum-size-subarray-sum/"},"209.\xa0Minimum Size Subarray Sum")),(0,a.yg)("p",null,"Given an array of positive integers\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0and a positive integer\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),", return\xa0",(0,a.yg)("em",{parentName:"p"},"the\xa0",(0,a.yg)("strong",{parentName:"em"},"minimal length"),"\xa0of a"),"\xa0",(0,a.yg)("em",{parentName:"p"},"subarray"),"\xa0",(0,a.yg)("em",{parentName:"p"},"whose sum is greater than or equal to"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),". If there is no such subarray, return\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"0"),"\xa0instead."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," target = 7, nums = ","[2,3,1,2,4,3]","\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," 2\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," The subarray ","[4,3]"," has the minimal length under the problem constraint."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," target = 4, nums = ","[1,4,4]","\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," 1"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 3:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," target = 11, nums = ","[1,1,1,1,1,1,1,1]","\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," 0"),(0,a.yg)("h2",{id:"idea"},"Idea"),(0,a.yg)("p",null,"Given the problem's description, the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array can contain multiple subarrays where the sum of their elements equals the target. We employ the two-pointer approach to efficiently determine the shortest such subarray."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"function minSubArrayLen(target: number, nums: number[]): number {  \n  let left = 0;  \n  let right = 0;  \n  let sum = 0;  \n  let len = Infinity; // max  \n  \n  while (right < nums.length) {  \n    sum += nums[right];  \n  \n    while (sum >= target) {  \n      sum -= nums[left];  \n      len = Math.min(len, right - left + 1);  \n      left++;  \n    }  \n    right++;  \n  }  \n  \n  return len === Infinity ? 0 : len;  \n};\n")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Initialization"),": Start with two pointers, ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"right"),", both positioned at the beginning of the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. Declare a variable ",(0,a.yg)("inlineCode",{parentName:"p"},"len")," initialized to store the length of the shortest subarray found.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Iterating with the ",(0,a.yg)("inlineCode",{parentName:"strong"},"right")," pointer"),": As we move the ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," pointer through ",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),", continuously add ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[right]")," to our running ",(0,a.yg)("inlineCode",{parentName:"p"},"sum"),".")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Adjusting the ",(0,a.yg)("inlineCode",{parentName:"strong"},"left")," pointer"),": If the ",(0,a.yg)("inlineCode",{parentName:"p"},"sum")," exceeds or equals the target:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Calculate the current subarray's length."),(0,a.yg)("li",{parentName:"ul"},"Update ",(0,a.yg)("inlineCode",{parentName:"li"},"len")," to be the minimum between its current value and the newly computed subarray length."),(0,a.yg)("li",{parentName:"ul"},"Subtract ",(0,a.yg)("inlineCode",{parentName:"li"},"nums[left]")," from the ",(0,a.yg)("inlineCode",{parentName:"li"},"sum")," and increment the ",(0,a.yg)("inlineCode",{parentName:"li"},"left")," pointer."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Exploring Potential Subarrays"),": Increment the ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," pointer and repeat the process, exploring other possible subarrays.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Returning the Result"),": Conclude by returning ",(0,a.yg)("inlineCode",{parentName:"p"},"len"),". If no suitable subarray is found, return ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),"."))),(0,a.yg)("h2",{id:"my-words"},"My Words"),(0,a.yg)("h2",{id:"idea-1"},"idea"),(0,a.yg)("p",null,"Given the problem's description, ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," can have multiple subarrays whose elements sum up to the target. The two-pointer approach is a suitable solution to find the shortest such subarray."),(0,a.yg)("h2",{id:"solution-1"},"Solution"),(0,a.yg)("p",null,"We initiate two pointers, ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"right"),", both starting at the beginning of the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. We also declare a variable ",(0,a.yg)("inlineCode",{parentName:"p"},"len")," to store the length of the current shortest subarray.\nAs we iterate through ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," pointer,  we increment add ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[right]")," to our ",(0,a.yg)("inlineCode",{parentName:"p"},"sum"),". If the ",(0,a.yg)("inlineCode",{parentName:"p"},"sum")," becomes greater than or equal to the target, we record the current subarray's length, and update our ",(0,a.yg)("inlineCode",{parentName:"p"},"len")," with the minimum of the previously recorded length and the new length. Decrement ",(0,a.yg)("inlineCode",{parentName:"p"},"sum")," by ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[left]")," and move the ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," pointer one step forward.\nWe continue the process and move the ",(0,a.yg)("inlineCode",{parentName:"p"},"right")," pointer to explore other potential subarrays.\nIn the end, if we haven't found any suitable subarray, we return ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),". Otherwise, we return the length of the shortest subarray."))}g.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>h});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),y=a,h=m["".concat(p,".").concat(y)]||m[y]||g[y]||i;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);