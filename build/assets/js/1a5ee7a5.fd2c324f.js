"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[5349],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(t),c=i,d=u["".concat(s,".").concat(c)]||u[c]||g[c]||o;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var m=2;m<o;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=t(8168),i=(t(6540),t(5680));const o={},a="1143. Longest Common Subsequence",l={unversionedId:"dynamic/Longest Common Subsequence",id:"dynamic/Longest Common Subsequence",title:"1143. Longest Common Subsequence",description:"1143. Longest Common Subsequence",source:"@site/docs/dynamic/1143. Longest Common Subsequence.md",sourceDirName:"dynamic",slug:"/dynamic/Longest Common Subsequence",permalink:"/docs/dynamic/Longest Common Subsequence",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dynamic/1143. Longest Common Subsequence.md",tags:[],version:"current",sidebarPosition:1143,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"746. Min Cost Climbing Stairs",permalink:"/docs/dynamic/Min Cost Climbing Stairs"},next:{title:"Maximum Subarray",permalink:"/docs/greedy/Maximum Subarray"}},s={},m=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],p={toc:m},u="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"1143-longest-common-subsequence"},"1143. Longest Common Subsequence"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-common-subsequence/"},"1143. Longest Common Subsequence")),(0,i.yg)("h2",{id:"problem"},"Problem"),(0,i.yg)("p",null,"Given two strings\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"text1"),"\xa0and\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"text2"),", return\xa0",(0,i.yg)("em",{parentName:"p"},"the length of their longest\xa0",(0,i.yg)("strong",{parentName:"em"},"common subsequence"),"."),"\xa0If there is no\xa0",(0,i.yg)("strong",{parentName:"p"},"common subsequence"),", return\xa0",(0,i.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,i.yg)("p",null,"A\xa0",(0,i.yg)("strong",{parentName:"p"},"subsequence"),"\xa0of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"For example,\xa0",(0,i.yg)("inlineCode",{parentName:"li"},'"ace"'),"\xa0is a subsequence of\xa0",(0,i.yg)("inlineCode",{parentName:"li"},'"abcde"'),".")),(0,i.yg)("p",null,"A\xa0",(0,i.yg)("strong",{parentName:"p"},"common subsequence"),"\xa0of two strings is a subsequence that is common to both strings."),(0,i.yg)("h2",{id:"solution"},"Solution"),(0,i.yg)("p",null,"To solve this problem, I used a dynamic programming method by creating a 2D grid, ",(0,i.yg)("inlineCode",{parentName:"p"},"grid[i][j]"),", which shows the longest common subsequence length between the first ",(0,i.yg)("inlineCode",{parentName:"p"},"i")," characters of ",(0,i.yg)("inlineCode",{parentName:"p"},"text1")," and the first ",(0,i.yg)("inlineCode",{parentName:"p"},"j")," characters of ",(0,i.yg)("inlineCode",{parentName:"p"},"text2"),"."),(0,i.yg)("p",null,"First, I initialized the grid to size ",(0,i.yg)("inlineCode",{parentName:"p"},"(m + 1) x (n + 1)"),", where ",(0,i.yg)("inlineCode",{parentName:"p"},"m")," is the length of ",(0,i.yg)("inlineCode",{parentName:"p"},"text1")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"n")," is the length of ",(0,i.yg)("inlineCode",{parentName:"p"},"text2"),'. The "plus one" is to handle the case when strings are empty, making position 0 our base condition. All spots in the grid are set to ',(0,i.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,i.yg)("p",null,"Then, starting from 1, I looped through the grid. If ",(0,i.yg)("inlineCode",{parentName:"p"},"text1[i - 1]")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"text2[j - 1]")," are equal, it means the previous string matches, so we take the value from the previous grid spot plus one as the current value. If not equal, then we find the max number from ",(0,i.yg)("inlineCode",{parentName:"p"},"text1")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"text2")," before ",(0,i.yg)("inlineCode",{parentName:"p"},"i")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"j"),". Repeat this process and finally return the last spot of the grid."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"(m + 1) x (n + 1)"),':  "a grid with m plus one rows by n plus one columns\u201d\u3002')),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"text1[i - 1]")," and  ",(0,i.yg)("inlineCode",{parentName:"p"},"text2[j - 1]"),":  For ",(0,i.yg)("inlineCode",{parentName:"p"},"text1[i - 1]"),'\uff0c"the character at index i minus one in text one\u3002')),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"grid[i - 1][j - 1]"),':  "the value in the grid at row i minus one and column j minus one"\u3002')),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"grid[i][j]"),': "the value in the grid at row i and column j"\uff0c'))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function longestCommonSubsequence(text1: string, text2: string): number {\n    const m = text1.length;\n    const n = text2.length;\n    let grid = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (text1[i - 1] === text2[j - 1]) {\n                grid[i][j] = grid[i - 1][j - 1] + 1;\n            } else {\n                grid[i][j] = Math.max(grid[i - 1][j], grid[i][j - 1]);\n            }\n        }\n    }\n\n    return grid[m][n];\n};\n")))}g.isMDXComponent=!0}}]);