"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[6867],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>y});var n=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),u=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=o,y=p["".concat(i,".").concat(h)]||p[h]||g[h]||a;return t?n.createElement(y,l(l({ref:r},c),{},{components:t})):n.createElement(y,l({ref:r},c))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=h;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var u=2;u<a;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6142:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=t(8168),o=(t(6540),t(5680));const a={},l="617. Merge Two Binary Trees",s={unversionedId:"trees/Merge Two Binary Trees",id:"trees/Merge Two Binary Trees",title:"617. Merge Two Binary Trees",description:"617. Merge Two Binary Trees",source:"@site/docs/trees/617. Merge Two Binary Trees.md",sourceDirName:"trees",slug:"/trees/Merge Two Binary Trees",permalink:"/docs/trees/Merge Two Binary Trees",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/617. Merge Two Binary Trees.md",tags:[],version:"current",sidebarPosition:617,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"572.\xa0Subtree of Another Tree",permalink:"/docs/trees/Subtree of Another Tree"},next:{title:"701. Insert into a Binary Search Tree",permalink:"/docs/trees/Insert into a Binary Search Tree"}},i={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],c={toc:u},p="wrapper";function g(e){let{components:r,...t}=e;return(0,o.yg)(p,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"617-merge-two-binary-trees"},"617. Merge Two Binary Trees"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-binary-trees/"},"617. Merge Two Binary Trees")),(0,o.yg)("h2",{id:"problem"},"Problem"),(0,o.yg)("p",null,"You are given two binary trees\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"root1"),"\xa0and\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"root2"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node.\xa0Otherwise, the NOT null node will be used as the node of the new tree.\n")),(0,o.yg)("p",null,"Return\xa0",(0,o.yg)("em",{parentName:"p"},"the merged tree"),"."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Note:"),"\xa0The merging process must start from the root nodes of both trees."),(0,o.yg)("h2",{id:"solution"},"Solution"),(0,o.yg)("p",null,"When two nodes overlap, we add their values and put the sum in the new tree. If a node exists in one tree but not the other, we use the existing node in the new tree."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Create a new root node"),": The value of the new root node is the sum of the two tree's root nodes. If one tree's root is null, we use the other tree's root."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Merge Left Subtrees Recursively"),": We call the merge function recursively on the left children of both trees. The result becomes the left child of the new tree."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Merge Right Subtrees Recursively"),": Similarly, we merge the right children of both trees recursively."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Return Result"),": The end result of the recursion is the new merged tree.\nThe key is to recursively traverse each node in both trees, adding values when both nodes exist, and using the existing node when one is null.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"function mergeTrees(root1: TreeNode | null, root2: TreeNode | null): TreeNode | null {  \n  if (root1 === null && root2 === null) {  \n    return null;  \n  }  \n  const v1 = root1 ? root1.val : 0;  \n  const v2 = root2 ? root2.val : 0;  \n  \n  const root = new TreeNode(v1 + v2);  \n  \n  root.left = mergeTrees(root1 ? root1.left : null, root2 ? root2.left : null);  \n  root.right = mergeTrees(root1 ? root1.right : null, root2 ? root2.right : null);  \n  \n  return root;  \n};\n")))}g.isMDXComponent=!0}}]);