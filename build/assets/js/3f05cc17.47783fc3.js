"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[3911],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const i={},o="567.\xa0Permutation\xa0in String",s={unversionedId:"Array/Permutation\xa0in String",id:"Array/Permutation\xa0in String",title:"567.\xa0Permutation\xa0in String",description:"567.\xa0Permutation\xa0in String",source:"@site/docs/Array/567.\xa0Permutation\xa0in String.md",sourceDirName:"Array",slug:"/Array/Permutation\xa0in String",permalink:"/AlgorithmNEnglishQuests/docs/Array/Permutation\xa0in String",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/567.\xa0Permutation\xa0in String.md",tags:[],version:"current",sidebarPosition:567,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intersection of Two Arrays",permalink:"/AlgorithmNEnglishQuests/docs/Array/Intersection of Two Arrays"},next:{title:"[977.\xa0Squares of a Sorted Array](https://leetcode.com/problems/squares-of-a-sorted-array/)",permalink:"/AlgorithmNEnglishQuests/docs/Array/Squares of a Sorted Array"}},l={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"567permutationin-string"},"567.\xa0Permutation\xa0in String"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/permutation-in-string/"},"567.\xa0Permutation\xa0in String")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given two strings\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s1"),"\xa0and\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),", return\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"\xa0",(0,a.yg)("em",{parentName:"p"},"if"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),"\xa0",(0,a.yg)("em",{parentName:"p"},"contains a\xa0permutation\xa0of"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s1"),(0,a.yg)("em",{parentName:"p"},", or"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"\xa0",(0,a.yg)("em",{parentName:"p"},"otherwise"),"."),(0,a.yg)("p",null,"In other words, return\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"\xa0if one of\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s1"),"'s\xa0permutations\xa0is the substring of\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),"."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"To solve this problem, we use a sliding window approach. We set the window size equal to the length of ",(0,a.yg)("inlineCode",{parentName:"p"},"s1")," and slide it through ",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),", tracking the frequency of each character within the window. We use two hash tables, ",(0,a.yg)("inlineCode",{parentName:"p"},"s1Map")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"s2Map"),", to record the character frequencies of ",(0,a.yg)("inlineCode",{parentName:"p"},"s1")," and the current window in ",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),", respectively. Initially, we populate these tables for the first window in ",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),". Then, as we slide the window through ",(0,a.yg)("inlineCode",{parentName:"p"},"s2"),", we update ",(0,a.yg)("inlineCode",{parentName:"p"},"s2Map")," and compare it with ",(0,a.yg)("inlineCode",{parentName:"p"},"s1Map")," to check for a permutation match."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"function checkInclusion(s1: string, s2: string): boolean {\n  // Return false if s1 is longer than s2, as inclusion isn't possible\n  if (s1.length > s2.length)\n    return false;\n\n  // Create frequency arrays for s1 and s2, initialized with zeros\n  const s1Map = new Array(26).fill(0);\n  const s2Map = new Array(26).fill(0);\n\n  // Populate frequency arrays for the first window of s2 and for s1\n  for (let i = 0; i < s1.length; i++) {\n    s1Map[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    s2Map[s2.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n  }\n\n  // Compare frequency arrays; if equal, s1's permutation is in the first window of s2\n  if (s1Map.join('') === s2Map.join(''))\n    return true;\n\n  let l = 0;  // Left pointer for the sliding window\n\n  // Start sliding the window over s2\n  for (let r = s1.length; r < s2.length; r++) {\n    // Add new character to s2Map and remove the leftmost character\n    s2Map[s2.charCodeAt(r) - 'a'.charCodeAt(0)]++;\n    s2Map[s2.charCodeAt(l) - 'a'.charCodeAt(0)]--;\n\n    // Compare updated frequency arrays after sliding the window\n    if (s1Map.join('') === s2Map.join(''))\n      return true;\n\n    l++;  // Move the left pointer to the right\n  }\n\n  // Final check if the remaining window contains s1's permutation\n  return s1Map.join('') === s2Map.join('');\n};\n\n")))}d.isMDXComponent=!0}}]);