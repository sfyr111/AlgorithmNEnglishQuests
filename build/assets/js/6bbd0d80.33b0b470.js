"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[4953],{801:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var n=r(8168),a=(r(6540),r(5680));const i={},o="74.\xa0Search a 2D Matrix",l={unversionedId:"binary search/Search a 2D Matrix",id:"binary search/Search a 2D Matrix",title:"74.\xa0Search a 2D Matrix",description:"74.\xa0Search a 2D Matrix",source:"@site/docs/binary search/74.\xa0Search a 2D Matrix.md",sourceDirName:"binary search",slug:"/binary search/Search a 2D Matrix",permalink:"/docs/binary search/Search a 2D Matrix",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/binary search/74.\xa0Search a 2D Matrix.md",tags:[],version:"current",sidebarPosition:74,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"33.\xa0Search in Rotated Sorted Array",permalink:"/docs/binary search/Search in Rotated Sorted Array"},next:{title:"153.\xa0Find Minimum in Rotated Sorted Array",permalink:"/docs/binary search/Find Minimum in Rotated Sorted Array"}},s={},h=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],c={toc:h},m="wrapper";function p(e){let{components:t,...r}=e;return(0,a.yg)(m,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"74search-a-2d-matrix"},"74.\xa0Search a 2D Matrix"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/search-a-2d-matrix/"},"74.\xa0Search a 2D Matrix")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"You are given an\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"m x n"),"\xa0integer matrix\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"matrix"),"\xa0with the following two\xa0properties:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Each row is sorted in non-decreasing order."),(0,a.yg)("li",{parentName:"ul"},"The first integer of each row is greater than the last integer of the previous row.")),(0,a.yg)("p",null,"Given an integer\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),", return\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"\xa0",(0,a.yg)("em",{parentName:"p"},"if"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),"\xa0",(0,a.yg)("em",{parentName:"p"},"is in"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"matrix"),"\xa0",(0,a.yg)("em",{parentName:"p"},"or"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"\xa0",(0,a.yg)("em",{parentName:"p"},"otherwise"),"."),(0,a.yg)("p",null,"You must write a solution in\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"O(log(m * n))"),"\xa0time complexity."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"To search for a number in a sorted matrix, use binary search twice: first to identify the potential row by comparing the target with the first or last elements of each row, and then to search within that row. This has a time complexity of O(log M + log N), where M is the number of rows and N is the number of columns."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function searchMatrix(matrix: number[][], target: number): boolean {\n  let top = 0; // Start with the first row\n  let bot = matrix.length - 1; // ... and the last row\n  let ROW: number; // This will hold the index of the row that might contain the target\n\n  // Binary search to find the row where the target might be\n  while (top <= bot) {\n    const mid = Math.floor((top + bot) / 2); // Middle index\n    if (target < matrix[mid][0]) {\n      // Target is less than the first element of mid row\n      bot = mid - 1; // Eliminate the lower half\n    } else if (target > matrix[mid][matrix[0].length - 1]) {\n      // Target is greater than the last element of mid row\n      top = mid + 1; // Eliminate the upper half\n    } else {\n      ROW = mid; // Found the row where the target might be\n      break;\n    }\n  }\n\n  // If we have not found a suitable row, return false\n  if (top > bot) {\n    return false;\n  }\n\n  // At this point, ROW contains the row index where the target may be found\n  // Now we perform a binary search on this row\n  let left = 0; // Start with the first element of the row\n  let right = matrix[ROW].length - 1; // ... and the last element of the row\n\n  // Binary search within the found row\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2); // Middle index of the row\n    if (target < matrix[ROW][mid]) {\n      // Target is less than the mid element\n      right = mid - 1; // Eliminate the right half\n    } else if (target > matrix[ROW][mid]) {\n      // Target is greater than the mid element\n      left = mid + 1; // Eliminate the left half\n    } else {\n      return true; // Target found\n    }\n  }\n\n  // Target is not found after searching the whole row\n  return false;\n};\n")))}p.isMDXComponent=!0},5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>d});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),h=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=h(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=h(r),u=a,d=m["".concat(s,".").concat(u)]||m[u]||p[u]||i;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var h=2;h<i;h++)o[h]=r[h];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);