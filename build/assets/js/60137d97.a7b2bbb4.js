"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[5976],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>c});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),m=p(t),g=a,c=m["".concat(s,".").concat(g)]||m[g]||y[g]||o;return t?r.createElement(c,i(i({ref:n},l),{},{components:t})):r.createElement(c,i({ref:n},l))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[m]="string"==typeof e?e:a,i[1]=u;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const o={},i="1. two sum",u={unversionedId:"Array/two sum",id:"Array/two sum",title:"1. two sum",description:"Problem",source:"@site/docs/Array/1. two sum.md",sourceDirName:"Array",slug:"/Array/two sum",permalink:"/docs/Array/two sum",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Array/1. two sum.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"twoSum",permalink:"/docs/Array/twoSum"}},s={},p=[{value:"Problem",id:"problem",level:2},{value:"Idea",id:"idea",level:2},{value:"Solution 1",id:"solution-1",level:2},{value:"Solution 2",id:"solution-2",level:2}],l={toc:p},m="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"1-two-sum"},"1. two sum"),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given an array of integers\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0and an integer\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"target"),", return\xa0",(0,a.yg)("em",{parentName:"p"},"indices of the two numbers such that they add up to\xa0",(0,a.yg)("inlineCode",{parentName:"em"},"target")),"."),(0,a.yg)("p",null,"You may\xa0assume\xa0that each input would have\xa0",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"exactly"),"\xa0one solution"),", and you may not use the\xa0",(0,a.yg)("em",{parentName:"p"},"same"),"\xa0element twice."),(0,a.yg)("p",null,"You can return the answer in any order."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," nums = ","[2,7,11,15]",", target = 9\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[0,1]","\n",(0,a.yg)("strong",{parentName:"p"},"Explanation:")," Because nums","[0]"," + nums","[1]"," == 9, we return ","[0, 1]","."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," nums = ","[3,2,4]",", target = 6\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[1,2]"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 3:")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Input:")," nums = ","[3,3]",", target = 6\n",(0,a.yg)("strong",{parentName:"p"},"Output:")," ","[0,1]"),(0,a.yg)("h2",{id:"idea"},"Idea"),(0,a.yg)("p",null,"The given problem requires us to find two numbers from the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array such that their sum equals the specified target. The solution should return the indices of these two numbers."),(0,a.yg)("h2",{id:"solution-1"},"Solution 1"),(0,a.yg)("p",null,"To solve this, we use two loops. We iterate over each number in the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array using ",(0,a.yg)("inlineCode",{parentName:"p"},"i"),". For each ",(0,a.yg)("inlineCode",{parentName:"p"},"i"),", we again iterate over the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array using ",(0,a.yg)("inlineCode",{parentName:"p"},"j"),". If the numbers at ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"j")," add up to ",(0,a.yg)("inlineCode",{parentName:"p"},"target")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," is not equals ",(0,a.yg)("inlineCode",{parentName:"p"},"j"),", then ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"j")," are our answer. We return them."),(0,a.yg)("p",null,"Because we use two loops as nested in this solution, the time complexity is O(n^2), where n is the length of the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. Since this solution doesn't use any additional array or data structures, the space complexity is O(1)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"const twoSum = function(nums, target) {\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] + nums[j] === target && i !== j) {\n                return [i, j];\n            }\n        }\n    }\n}\n")),(0,a.yg)("h2",{id:"solution-2"},"Solution 2"),(0,a.yg)("p",null,"To reduce the time complexity, we can use a hash table. First, we declare a map variable and then iterate over the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. For each number, we find the difference as target minus ",(0,a.yg)("inlineCode",{parentName:"p"},"nums[i]"),". If the map has this difference as a key, we return the map's value for this difference and the current index ",(0,a.yg)("inlineCode",{parentName:"p"},"i"),". Otherwise, we add the current number to our map with its index ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," as the value."),(0,a.yg)("p",null,"The loop iterates the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array once, so the time complexity is O(n), where n is the length of the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array. We use a map to store all the elements of the ",(0,a.yg)("inlineCode",{parentName:"p"},"nums")," array, so the space complexity is O(n)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"const twoSum = function(nums, target) {\n    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const diff = target - nums[i];\n        if (map.has(diff)) {\n            return [i, map.get(diff)];\n        } else {\n            map.set(nums[i], i);\n        }\n    }\n}\n")))}y.isMDXComponent=!0}}]);