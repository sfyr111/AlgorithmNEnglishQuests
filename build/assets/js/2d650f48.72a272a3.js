"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[4456],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>f});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,f=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const o={},l=void 0,i={unversionedId:"trees/Balanced Binary Tree",id:"trees/Balanced Binary Tree",title:"Balanced Binary Tree",description:"110.\xa0Balanced Binary Tree](https://leetcode.com/problems/balanced-binary-tree/)",source:"@site/docs/trees/110.\xa0Balanced Binary Tree.md",sourceDirName:"trees",slug:"/trees/Balanced Binary Tree",permalink:"/AlgorithmNEnglishQuests/docs/trees/Balanced Binary Tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/110.\xa0Balanced Binary Tree.md",tags:[],version:"current",sidebarPosition:110,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"108. Convert Sorted Array to Binary Search Tree",permalink:"/AlgorithmNEnglishQuests/docs/trees/Convert Sorted Array to Binary Search Tree"},next:{title:"112. Path Sum",permalink:"/AlgorithmNEnglishQuests/docs/trees/Path Sum"}},s={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"110.\xa0Balanced Binary Tree](",(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/balanced-binary-tree/"},"https://leetcode.com/problems/balanced-binary-tree/"),")"),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given a binary tree,\xa0determine\xa0if it is\xa0",(0,a.yg)("strong",{parentName:"p"},"height-balanced")),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"This code checks if a binary tree is balanced. A balanced tree means the height difference between left and right subtrees for all nodes is not more than one."),(0,a.yg)("p",null,"Here's how it works:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We have a helper function ",(0,a.yg)("inlineCode",{parentName:"li"},"dfs")," that we call recursively on each node."),(0,a.yg)("li",{parentName:"ul"},"If a node is ",(0,a.yg)("inlineCode",{parentName:"li"},"null"),", we return ",(0,a.yg)("inlineCode",{parentName:"li"},"true")," for balanced and ",(0,a.yg)("inlineCode",{parentName:"li"},"0")," for height because an empty tree is balanced and its height is zero."),(0,a.yg)("li",{parentName:"ul"},"For non-null nodes, we get balance status and height for left and right subtrees."),(0,a.yg)("li",{parentName:"ul"},"We check if the current node is balanced. It is balanced if the left and right subtrees are balanced and the height difference between them is one or less."),(0,a.yg)("li",{parentName:"ul"},"We return the balance status and the height for the current node. The height is the maximum of left or right subtree heights plus one for the current node."),(0,a.yg)("li",{parentName:"ul"},"Finally, we call ",(0,a.yg)("inlineCode",{parentName:"li"},"dfs")," on the root and return the balance status from the result.")),(0,a.yg)("p",null,"So, this approach checks each subtree's balance and height in one pass, top-down, and finds if the whole tree is balanced."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function isBalanced(root: TreeNode | null): boolean {\n\n  function dfs(node: TreeNode) {\n    if (node === null) {\n      return [true, 0];\n    }\n\n    const [leftBalanced, leftHeight] = dfs(node.left);\n    const [rightBalanced, rightHeight] = dfs(node.right);\n\n    const balanced = (\n      leftBalanced && rightBalanced\n      && Math.abs(leftHeight - rightHeight) <= 1\n    );\n\n    return [balanced, 1 + Math.max(leftHeight, rightHeight)];\n  }\n\n  const pair = dfs(root);\n  return pair[0];\n};\n")))}p.isMDXComponent=!0}}]);