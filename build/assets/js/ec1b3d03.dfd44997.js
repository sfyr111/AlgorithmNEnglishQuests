"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[2616],{5292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const o={},l="230. Kth Smallest Element in a BST",s={unversionedId:"trees/Kth Smallest Element in a BST",id:"trees/Kth Smallest Element in a BST",title:"230. Kth Smallest Element in a BST",description:"230. Kth Smallest Element in a BST",source:"@site/docs/trees/230. Kth Smallest Element in a BST.md",sourceDirName:"trees",slug:"/trees/Kth Smallest Element in a BST",permalink:"/docs/trees/Kth Smallest Element in a BST",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trees/230. Kth Smallest Element in a BST.md",tags:[],version:"current",sidebarPosition:230,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"226.\xa0Invert Binary Tree",permalink:"/docs/trees/Invert Binary Tree"},next:{title:"235.\xa0Lowest Common Ancestor of a Binary Search Tree",permalink:"/docs/trees/Lowest Common Ancestor of a Binary Search Tree"}},i={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"230-kth-smallest-element-in-a-bst"},"230. Kth Smallest Element in a BST"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/"},"230. Kth Smallest Element in a BST")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Given the\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"root"),"\xa0of a binary search tree, and an integer\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"k"),", return\xa0",(0,a.yg)("em",{parentName:"p"},"the"),"\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"kth"),"\xa0",(0,a.yg)("em",{parentName:"p"},"smallest value (",(0,a.yg)("strong",{parentName:"em"},"1-indexed"),") of all the values of the nodes in the tree"),"."),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"To find the k-th smallest element in a binary search tree. We use iteration, not recursion because it can be more efficient in this case. It saves memory by not using the system call stack. We use a stack to keep track of nodes. The while condition has two parts. It checks if we have nodes in the stack or a current node to process. We go left as far as possible, pushing nodes onto the stack. When we can't go left, we pop from the stack. This is the next smallest node. We count each node we pop. If the count matches k, we find our k-th smallest node and return its value. If we pop and it's not the k-th, we go right. This loop continues until we find the k-th smallest or run out of nodes. If we run out of nodes, we return -1, which means there isn't a k-th smallest element."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function kthSmallest(root: TreeNode | null, k: number): number {\n  let stack: TreeNode[] = [];\n  let current: TreeNode = root;\n  let count = 0;\n\n  while (stack.length > 0 || current !== null) {\n\n    while (current !== null) {\n      stack.push(current);\n      current = current.left;\n    }\n\n    current = stack.pop();\n    count += 1;\n    if (count === k) {\n      return current.val;\n    }\n\n    current = current.right;\n  }\n\n  return -1;\n};\n")))}p.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>f});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=a,f=m["".concat(i,".").concat(h)]||m[h]||p[h]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);