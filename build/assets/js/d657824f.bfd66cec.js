"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[2641],{966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(8168),o=(n(6540),n(5680));const i={},l="[21.\xa0Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)",s={unversionedId:"linklist/Merge Two Sorted Lists",id:"linklist/Merge Two Sorted Lists",title:"[21.\xa0Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)",description:"Problem",source:"@site/docs/linklist/21.\xa0Merge Two Sorted Lists.md",sourceDirName:"linklist",slug:"/linklist/Merge Two Sorted Lists",permalink:"/docs/linklist/Merge Two Sorted Lists",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/linklist/21.\xa0Merge Two Sorted Lists.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[19.\xa0Remove Nth Node From End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)",permalink:"/docs/linklist/Remove Nth Node From End of List"},next:{title:"[92.\xa0Reverse Linked List II](https://leetcode.com/problems/reverse-linked-list-ii/)",permalink:"/docs/linklist/Reverse Linked List II"}},a={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"21merge-two-sorted-lists"},(0,o.yg)("a",{parentName:"h1",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"21.\xa0Merge Two Sorted Lists")),(0,o.yg)("h2",{id:"problem"},"Problem"),(0,o.yg)("p",null,"You are given the heads of two sorted linked lists\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"list1"),"\xa0and\xa0",(0,o.yg)("inlineCode",{parentName:"p"},"list2"),"."),(0,o.yg)("p",null,"Merge the two lists into one\xa0",(0,o.yg)("strong",{parentName:"p"},"sorted"),"\xa0list. The list should be made by splicing together the nodes of the first two lists."),(0,o.yg)("p",null,"Return\xa0",(0,o.yg)("em",{parentName:"p"},"the head of the merged linked list"),"."),(0,o.yg)("h2",{id:"solution"},"Solution"),(0,o.yg)("p",null,"We solve this problem using an iterative approach, given that both list1 and list2 are sorted. Initially, we create a dummy node and set current to point to this node. We then iterate over the lists until one reaches its end. In each iteration, we compare list1 and list2 values, connect the node with the smaller value to current.next. We then advance current and move to the next node in the smaller-value list."),(0,o.yg)("p",null,"Once we reach the end of either list, we connect current.next to the remaining list that is not null. Finally, we return dummy.next, representing the head of the newly merged and sorted list."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"function mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {  \n  let dummy = new ListNode(0);  \n  let current = dummy;  \n  \n  while (list1 !== null && list2 !== null) {  \n    if (list1.val > list2.val) {  \n      current.next = list2;  \n      list2 = list2.next;  \n    } else {  \n      current.next = list1;  \n      list1 = list1.next;  \n    }    current = current.next;  \n  }  \n  \n  if (list1 === null) {  \n    current.next = list2;  \n  }  \n  if (list2 === null) {  \n    current.next = list1;  \n  }  \n  \n  return dummy.next;  \n};\n")))}p.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,g=d["".concat(a,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);