"use strict";(self.webpackChunkalgorithm_n_english_quests=self.webpackChunkalgorithm_n_english_quests||[]).push([[1032],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>c});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,c=d["".concat(m,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(c,o(o({ref:t},u),{},{components:n})):r.createElement(c,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(8168),a=(n(6540),n(5680));const i={},o="153.\xa0Find Minimum in Rotated Sorted Array",l={unversionedId:"binary search/Find Minimum in Rotated Sorted Array",id:"binary search/Find Minimum in Rotated Sorted Array",title:"153.\xa0Find Minimum in Rotated Sorted Array",description:"153.\xa0Find Minimum in Rotated Sorted Array",source:"@site/docs/binary search/153.\xa0Find Minimum in Rotated Sorted Array.md",sourceDirName:"binary search",slug:"/binary search/Find Minimum in Rotated Sorted Array",permalink:"/docs/binary search/Find Minimum in Rotated Sorted Array",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/binary search/153.\xa0Find Minimum in Rotated Sorted Array.md",tags:[],version:"current",sidebarPosition:153,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"74.\xa0Search a 2D Matrix",permalink:"/docs/binary search/Search a 2D Matrix"},next:{title:"704.\xa0Binary Search",permalink:"/docs/binary search/Binary Search"}},m={},s=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"153find-minimum-in-rotated-sorted-array"},"153.\xa0Find Minimum in Rotated Sorted Array"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"},"153.\xa0Find Minimum in Rotated Sorted Array")),(0,a.yg)("h2",{id:"problem"},"Problem"),(0,a.yg)("p",null,"Suppose\xa0an array of length\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"n"),"\xa0sorted in\xa0ascending\xa0order is\xa0",(0,a.yg)("strong",{parentName:"p"},"rotated"),"\xa0between\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"1"),"\xa0and\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"n"),"\xa0times. For example, the array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums = [0,1,2,4,5,6,7]"),"\xa0might become:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"[4,5,6,7,0,1,2]"),"\xa0if it was rotated\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"4"),"\xa0times."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"[0,1,2,4,5,6,7]"),"\xa0if it was rotated\xa0",(0,a.yg)("inlineCode",{parentName:"li"},"7"),"\xa0times.")),(0,a.yg)("p",null,"Notice that\xa0",(0,a.yg)("strong",{parentName:"p"},"rotating"),"\xa0an array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"[a[0], a[1], a[2], ..., a[n-1]]"),"\xa01 time results in the array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"[a[n-1], a[0], a[1], a[2], ..., a[n-2]]"),"."),(0,a.yg)("p",null,"Given the sorted rotated array\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"nums"),"\xa0of\xa0",(0,a.yg)("strong",{parentName:"p"},"unique"),"\xa0elements, return\xa0",(0,a.yg)("em",{parentName:"p"},"the minimum element of this array"),"."),(0,a.yg)("p",null,"You must write an algorithm that runs in\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"O(log n) time.")),(0,a.yg)("h2",{id:"solution"},"Solution"),(0,a.yg)("p",null,"We can use binary search to find the minimum value. We keep track of the minimum value we have seen so far as the result. The middle value is calculated by rounding down the average of the left and right indices. If the left value is less than or equal to the middle value, then the minimum value must be in the right half of the array. Otherwise, the minimum value must be in the left half of the array."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function findMin(nums: number[]): number {\n  // Initialize the result to the first element of the array.\n  let res = nums[0];\n\n  // Initialize the left and right pointers to the beginning and end of the array, respectively.\n  let left = 0;\n  let right = nums.length - 1;\n\n  // Loop until the left and right pointers meet.\n  while (left <= right) {\n    // If the left element is less than the right element, then the array is already sorted and the left element is the minimum.\n    if (nums[left] < nums[right]) {\n          // In the previous iteration, the mid value was the minimum value. The right pointer skipped the mid value, so we need to compare it. \n      // Example: [4,5,1,2,3]\n      res = Math.min(res, nums[left]);\n      // Break out of the loop.\n      break;\n    }\n\n    // Calculate the middle element of the array.\n    const mid = (left + right) >> 1;\n\n    // Update the result if necessary.\n    res = Math.min(res, nums[mid]);\n\n    // If the left element is less than or equal to the middle element, then the minimum value must be in the right half of the array.\n    if (nums[left] <= nums[mid]) {\n      // Update the right pointer to the middle element - 1.\n      right = mid - 1;\n    } else {\n      // Update the left pointer to the middle element + 1.\n      left = mid + 1;\n    }\n  }\n\n  // Return the result.\n  return res;\n}\n\n")))}p.isMDXComponent=!0}}]);