# 112. Path Sum

[112. Path Sum](https://leetcode.com/problems/path-sum/)

## Problem

Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.

A **leaf** is a node with no children.
## Solution

To solve it, we can use the recursive function solution and make helper function `dfs`:
1. **Base Case**: If the current node is null, return false because there's no path.
2. **Update Current Sum**: Add the current node's value to the cumulative sum.
3. **Leaf Node Check**: If the current node is a leaf (no left and right children), check if the current sum equals the target sum. Return true if it does.
4. **Recursive Calls**: If it's not a leaf node, recursively call `dfs` for the left and right children, passing the updated sum.
5. **Return Result**: Return true if either the left or right recursive call finds a path sum equal to the target sum. If no path matches the target sum, return false.
   This method checks each path from the root to the leaves, adding up the values. If any path's sum matches the target sum at a leaf, it returns true. If not, it returns false.

```typescript
function hasPathSum(root: TreeNode | null, targetSum: number): boolean {  
  
  function dfs(node: TreeNode, curSum) {  
    if (node === null) {  
      return false;  
    }  
    curSum += node.val;  
  
    if (node.left === null && node.right === null) {  
      return curSum === targetSum;  
    }  
    return dfs(node.left, curSum) || dfs(node.right, curSum);  
  }  
  
  return dfs(root, 0);  
};
```
