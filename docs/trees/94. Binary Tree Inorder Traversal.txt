# 94. Binary Tree Inorder Traversal

[94. Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/)

### **Inorder Traversal (Left, Node, Right)**

Inorder traversal of a binary tree visits the nodes in a left-middle-right order.

- **Recursive Approach**: In this method, we first call the function recursively to traverse the left subtree. Then, we process the current node. Finally, we call the function recursively again to traverse the right subtree.
- **Iterative Approach**: Here, we use a stack to simulate the recursive process. We start at the root and go as far left as possible, pushing each node onto the stack. When we can't go left anymore, we pop a node from the stack, process it, and then try to go right. This process repeats until we've processed all nodes.

```typescript
function inorderTraversal(root: TreeNode | null): number[] {  
  // inorder: left - middle - right  
  const result: number[] = [];  
  
  function traveerse(node: TreeNode) {  
    if (node === null) {  
      return;  
    }  
    traveerse(node.left);  
    result.push(node.val);  
    traveerse(node.right);  
  }  
  
  traveerse(root);  
  return result;  
};

function inorderTraversal(root: TreeNode | null): number[] {  
  // inorder: left - middle - right  
  const stack: TreeNode[] = [];  
  const result: number[] = [];  
  let current = root;  
  
  while (current || stack.length > 0) {  
    while (current) {  
      stack.push(current);  
      current = current.left;  
    }    current = stack.pop();  
    result.push(current.val);  
    current = current.right;  
  }  
  
  return result;  
};
