# 101. Symmetric Tree

[101. Symmetric Tree](https://leetcode.com/problems/symmetric-tree/)

## Problem

Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).

## Solution

To solve the problem, we can use the Recursive approach. We need to create a function called dfs that takes two nodes, left and right, as inputs. We will compare these two nodes and their respective subtrees. If both left and right are null, we return true. If one of them is null but not both, it returns false. The function checks if the values of left and right are equal. Then it makes two recursive calls: one to compare the right child of left with the left child of right, and another to compare the left child of left with the right child of right. Initially, the function is symmetric and calls dfs with the left and right children of the root node.

```typescript
function isSymmetric(root: TreeNode | null): boolean {  
  
  function dfs(left: TreeNode, right: TreeNode) {  
    if (left === null && right === null) {  
      return true;  
    }    if (left === null || right === null) {  
      return false;  
    }  
    return left.val === right.val  
        && dfs(left.right, right.left)  
        && dfs(left.left, right.right)  
  }  
  
  return dfs(root.left, root.right);  
};
