# 230. Kth Smallest Element in a BST

[230. Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)

## Problem

Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.

## Solution

To find the k-th smallest element in a binary search tree. We use iteration, not recursion because it can be more efficient in this case. It saves memory by not using the system call stack. We use a stack to keep track of nodes. The while condition has two parts. It checks if we have nodes in the stack or a current node to process. We go left as far as possible, pushing nodes onto the stack. When we can't go left, we pop from the stack. This is the next smallest node. We count each node we pop. If the count matches k, we find our k-th smallest node and return its value. If we pop and it's not the k-th, we go right. This loop continues until we find the k-th smallest or run out of nodes. If we run out of nodes, we return -1, which means there isn't a k-th smallest element.

```typescript
function kthSmallest(root: TreeNode | null, k: number): number {
  let stack: TreeNode[] = [];
  let current: TreeNode = root;
  let count = 0;

  while (stack.length > 0 || current !== null) {

    while (current !== null) {
      stack.push(current);
      current = current.left;
    }

    current = stack.pop();
    count += 1;
    if (count === k) {
      return current.val;
    }

    current = current.right;
  }

  return -1;
};
```
