# 105. Construct Binary Tree from Preorder and Inorder Traversal

[105. Construct Binary Tree from Preorder and Inorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)

## Problem

Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.

## Solution

To rebuild a binary tree from preorder and inorder traversals, we use the fact that the first element in the preorder list is the root of the tree. Then, we find this root in the inorder list, which tells us which nodes are in the left subtree and which are in the right subtree.

Here's how we solve it:

1. We take the first element from the preorder list to create the root node.
2. We locate this root in the inorder list to separate the nodes into left and right subtrees.
3. The nodes after the root in the preorder list are part of the left subtree,followed by the right subtree's nodes.
4. With this information, we recursively build the left subtree using the parts of the preorder and inorder lists that correspond to the left subtree. Then we do the same for the right subtree.
5. We repeat this process for all nodes, thus reconstructing the entire binary tree.

The key to solving this recursive problem is to understand how to use the information in both traversal lists to determine the structure of the tree.


```typescript
function buildTree(preorder: number[], inorder: number[]): TreeNode | null {  
  if (preorder.length === 0 || inorder.length === 0) {  
    return null;  
  }  
  
  let rootValue = preorder[0];  
  let root = new TreeNode(rootValue);  
  let mid = inorder.indexOf(rootValue);  
  
  root.left = buildTree(preorder.slice(1, mid + 1), inorder.slice(0, mid));  
  root.right = buildTree(preorder.slice(mid + 1), inorder.slice(mid + 1));  
  
  return root;  
};
```
