# 62. Unique Paths

[62. Unique Paths](https://leetcode.com/problems/unique-paths/)

## Problem

There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.

Given the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.

The test cases are generated so that the answer will be less than or equal to `2 * 109`.

## Solution

Dynamic programming can be used to solve the problem. Only the very top left to top right and left bottom paths can reach each position in the grid. For the rest of the positions, we add the top position to the left position. To implement this, we create a grid with a nested array and traverse it. If the current position is at the very top row or very left column, we put number one there. Otherwise, we calculate the sum of the left and top positions.

```typescript
function uniquePaths(m: number, n: number): number {
    const grid = new Array(m).fill(new Array(n));
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (i === 0 || j === 0) {
                grid[i][j] = 1;
            } else {
                grid[i][j] = grid[i][j - 1] + grid[i - 1][j];
            }
        }
    }
    return grid[m - 1][n - 1];
};
```

## Be better

We solve the 'Unique Paths' problem with dynamic programming. The grid's top row and left column have only one way to reach each spot. For other spots, we add the number of ways to the spot above and to the left. We create a grid as a two-dimensional array. We fill the first row and column with ones because there's just one path to those. For the rest, we add the top and left numbers at each spot to find all unique paths.
