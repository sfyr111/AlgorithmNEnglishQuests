# 91. Decode Ways

# [91. Decode Ways](https://leetcode.com/problems/decode-ways/)

## Problem

A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"

To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `"11106"` can be mapped into:

- `"AAJF"` with the grouping `(1 1 10 6)`
- `"KJF"` with the grouping `(11 10 6)`

Note that the grouping `(1 11 06)` is invalid because `"06"` cannot be mapped into `'F'` since `"6"` is different from `"06"`.

Given a string `s` containing only digits, return _the **number** of ways to **decode** it_.

The test cases are generated so that the answer fits in a **32-bit** integer.

## Solution

We use dynamic programming to solve this. It breaks big problems into small parts.

I think this way because we can see each part of the string as a small piece. Each piece can be a letter. '1' is 'A', '2' is 'B', and so on. But, '12' can also be 'L'. So, we look at one number and two numbers together.

We start from the end of the string to the start. We check each number to see how it can be letters. The last number has one way. For others, we see if one number or two numbers can be a letter. We add these ways up.

We must be careful for '0'. It can't be a letter alone. And two numbers together must be 26 or less.

We use a 'dp' hashtable to track how many ways each part can be letters. 'dp' at the end is 1 for an empty string.

Then, we fill 'dp' from back to start and return dp[0].

```typescript
function numDecodings(s: string): number {
    const dp: { [key: number]: number } = { [s.length]: 1 };

	function helper(index: number): number {
		if (dp[index]) {
			return dp[index];
		}
		if (s[index] === "0") {
			return 0;
		}

		let result: number = helper(index + 1);
		if (
			index < s.length - 1 &&
			(s[index] === "1" || (s[index] === "2" && s[index + 1] < "7"))
		) {
			result += helper(index + 2);
		}
		dp[index] = result;
		return result;
	}

	return helper(0);
};
```
