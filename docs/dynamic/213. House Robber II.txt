# 213. House Robber II

[213. House Robber II](https://leetcode.com/problems/house-robber-ii/)

## Problem

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.

## Solution

This version of the problem is different from version one. We can't rob the first and last house at the same time. We can solve this by breaking the array into two arrays. The first scenario processes the first to the second last position, excluding the last house. The second scenario processes the second to the last position, excluding the first house. We can use a helper function to find the maximum rob value for each scenario, and then return the greater value. If the nums array has only one element, we return that element.

```typescript
function rob(nums: number[]): number {  
  
  function helper(houses: number[]) {  
    let rob1 = 0;  
    let rob2 = 0;  
  
    for (let n of houses) {  
      const newRob = Math.max(n + rob1, rob2);  
      rob1 = rob2;  
      rob2 = newRob;  
    }  
    return rob2;  
  }  
  
  if (nums.length === 1)  
    return nums[0];  
  
  return Math.max(helper(nums.slice(1)), helper(nums.slice(0, -1)));  
  
};
