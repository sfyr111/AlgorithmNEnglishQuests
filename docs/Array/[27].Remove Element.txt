# [27. Remove Element](https://leetcode.com/problems/remove-element/)

## Problem
Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.

Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:

- Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.
- Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
// It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
assert nums[i] == expectedNums[i];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = [3,2,2,3], val = 3
**Output:** 2, nums = [2,2,_,_]
**Explanation:** Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = [0,1,2,2,3,0,4,2], val = 2
**Output:** 5, nums = [0,1,4,0,3,_,_,_]
**Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).


## Solution

Explanation:

The "Remove Element" problem asks us to remove all instances of a specific value (val) from an array (nums) in-place. The goal is to return the new length of the modified array.

To solve this, we adopt a two-pointer technique. We use one pointer, i, to keep track of the current position where we should place the next element that doesn't match val. The other pointer, j, iterates through the nums array.

As j traverses the array:

If nums[j] is different from val, we assign the value of nums[j] to nums[i] and increment i.
If nums[j] matches val, we just skip it and move on.
By the end of the loop, the portion of the array from the start to position i-1 contains all the elements that don't match val, and i gives the new length of the modified array.

```
  function removeElement(nums: number[], val: number): number {  
  let i = 0;  
  for (let j = 0; j < nums.length; j++) {  
    if (nums[j] !== val) {  
      nums[i] = nums[j];  
      i++;  
    }  }  
  return i + 1;  
};
```

## My Words
This problem requires an in-place update of the `nums` array. To address this, we use a two-pointer solution. We have two pointers, `i` and `j`. Pointer `i` represents the last position of processed elements different from the target. Pointer `j` iterates through the `nums` array, comparing each element to the target. If `nums[j]` doesn't equal the target, we put `nums[j]` to `nums[i]` and increment `i` by one. By the end, all elements before the `i` position are different from the target. Thus, the length of this section is `i + 1`.

