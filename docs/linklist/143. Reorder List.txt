# 143. Reorder List

[143. Reorder List](https://leetcode.com/problems/reorder-list/)

## Problem

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln

_Reorder the list to be on the following form:_

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …

You may not modify the values in the list's nodes. Only nodes themselves may be changed.


## Solution

To solve this problem, I plan to use the two-pointer method because it's efficient. First, I find the middle of the list. Slow pointer goes one step, fast pointer goes two steps. When fast pointer reaches the end, slow is in the middle.

Next, I reverse the second half of the list. This means changing the next of each node to the previous one.

Last step, I merge the two halves. I take one node from the first half and then one from the second half and combine them. This way, the list is reordered as required. It is a bit tricky but works well once you understand the steps.

```typescript
function reorderList(head: ListNode | null): void {
  // Check if the list is empty or has only one node, in which case, do nothing.
  if (!head || !head.next) return;

  // Find the middle of the list using the fast and slow pointer technique.
  // Slow moves one step at a time, while fast moves two steps.
  let slow = head;
  let fast = head.next; // fast starts at head.next to ensure that slow ends up at the middle or just before the middle in an even-length list.

  // Keep moving until fast reaches the end of the list
  while (fast && fast.next) {
    slow = slow.next; // slow pointer moves one step
    fast = fast.next.next; // fast pointer moves two steps
  }

  // Reverse the second half of the list.
  // Start from the node right after the slow pointer.
  let second = slow.next;
  // Disconnect the first half and the second half of the list.
  // This prevents any cycles from forming when we merge back later.
  let prev = slow.next = null;

  // Reverse the nodes of the second half in place.
  while (second) {
    const tmp = second.next;
    second.next = prev;
    prev = second;
    second = tmp;
  }

  // Merge the two halves back together, taking nodes alternately from each half.
  let first = head; // Start with the first node of the first half.
  second = prev; // Start with the last node of the reversed second half.

  // Weave the two halves together until we reach the end of the second half.
  while (second) {
    // Temporarily store the next nodes
    const tmp1 = first.next;
    const tmp2 = second.next;

    // Reconnect nodes from the first and second halves
    first.next = second; // First half node points to the next node of the second half.
    second.next = tmp1; // Current second half node points to the next node of the first half.

    // Move the pointers forward.
    first = tmp1; // Move the pointer in the first half forward.
    second = tmp2; // Move the pointer in the second half forward.
  }
};

```
