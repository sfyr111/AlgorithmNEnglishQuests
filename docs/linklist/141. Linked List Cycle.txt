141. Linked List Cycle](https://leetcode.com/problems/linked-list-cycle/)

## Problem

Given `head`, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.

Return `true` _if there is a cycle in the linked list_. Otherwise, return `false`.

## Solution

```
function hasCycle(head: ListNode | null): boolean {  
  if (head === null || head.next === null) {  
    return false;  
  }  
  
  let slow = head;  
  let fast = head.next;  
  
  while (slow !== fast) {  
    if (fast === null || fast.next === null) {  
      return false;  
    }    slow = slow.next;  
    fast = fast.next.next;  
  }  
  
  return true;  
};
```

In this problem, we apply the two-pointer technique to detect a cycle in a linked list. We initialize two pointers: `slow` moves one step at a time, and `fast` moves two steps at a time. As long as `slow` and `fast` have not met and `fast` and its subsequent node `fast.next` are not null, we continue to iterate. A null `fast` or `fast.next` signifies that we've reached the end of the list without encountering a cycle. If `fast` overtakes `slow` within the loop, it indicates that the list is cyclic.
