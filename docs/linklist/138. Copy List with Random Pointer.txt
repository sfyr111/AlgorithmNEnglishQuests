# 138. Copy List with Random Pointer

[138. Copy List with Random Pointer](https://leetcode.com/problems/copy-list-with-random-pointer/)

## Problem

A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.

Construct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.

Return _the head of the copied linked list_.

The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:

- `val`: an integer representing `Node.val`
- `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.

Your code will **only** be given the `head` of the original linked list.
## Solution

To solve the problem of copying a linked list with an extra random pointer, we use two primary steps. In the first step, we create a map that stores old nodes and their corresponding new copy nodes. To do this, we traverse the list once, create a copy node for every node, and put it in the map.
In the second step, we traverse the list again and set pointers for the new copy nodes. We use the map to find the copy nodes and then set the 'next' and 'random' pointers to the corresponding old node for each new copy node. If 'next' or 'random' is null, the new node also points to null.
Finally, we return a new list head that is a copy of the original list head from the map. This way, we create a complete copy of the list with all pointers set correctly.
```typescript
function copyRandomList(head: Node | null): Node | null {  
  let map = new Map<Node, Node>();  
  
  let current = head;  
  while (current) {  
    map.set(current, new Node(current.val));  
    current = current.next;  
  }  
  
  current = head;  
  while (current) {  
    const newNode = map.get(current);  
    newNode.next = current.next ? map.get(current.next) : null;  
    newNode.random = current.random ? map.get(current.random) : null;  
    current = current.next;  
  }  
  
  return map.get(head);  
};
```
