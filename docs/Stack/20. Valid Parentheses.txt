# 20. Valid Parentheses

[20. Valid Parentheses](https://leetcode.com/problems/valid-parentheses/)

## Problem

Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.

An input string is valid if:

1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
3. Every close bracket has a corresponding open bracket of the same type.

## Solution

To solve this problem, we need to create a hash table that maps each closing bracket to its corresponding opening bracket. Then we iterate through the string `s`, pushing any opening bracket onto a stack. If we encounter a closing bracket, we check the top of the stack. If it

```typescript
function isValid(s: string): boolean {
  let stack: string[] = [];
  const colseToOpen: { [key: string] : string } = {
    '}': '{',
    ')': '(',
    ']': '[',
  }

  for (let c of s) {
    if (colseToOpen[c]) {
      if (stack.length === 0 || stack[stack.length - 1] !== colseToOpen[c]) {
        return false
      }
      stack.pop();
    } else {
      stack.push(c);
    }
  }

  return stack.length === 0;
};
