# 225. Implement Stack using Queues

[225. Implement Stack using Queues](https://leetcode.com/problems/implement-stack-using-queues/)

## Problem

Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).

Implement the `MyStack` class:

- `void push(int x)` Pushes element x to the top of the stack.
- `int pop()` Removes the element on the top of the stack and returns it.
- `int top()` Returns the element on the top of the stack.
- `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.

**Notes:**

- You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.
- Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
## Solution

To implement a stack using a queue, the push, empty, and top methods can be implemented simply.
The push method simply adds an element to the end of the queue.
The empty method checks if the queue is empty.
The top method retrieves the last element added to the queue.
To implement a pop method on a queue, remove all values except the last one, then add the removed values back to the queue. The final pop operation works like a stack pop operation.

```typescript
class MyStack {  
    queue: number[];  
  
    constructor() {  
       this.queue = [];  
    }  
  
    push(x: number): void {  
        this.queue.push(x);  
    }  
  
    pop(): number {  
        for (let i = 0; i < this.queue.length - 1; i++) {  
            const pop = this.queue.shift();  
            this.queue.push(pop);  
        }        return this.queue.shift();  
    }  
  
    top(): number {  
        return this.queue[this.queue.length - 1];  
    }  
  
    empty(): boolean {  
        return this.queue.length === 0;  
    }  
}

```
