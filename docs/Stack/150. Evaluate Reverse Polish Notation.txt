# 150. Evaluate Reverse Polish Notation

150. Evaluate Reverse Polish Notation](https://leetcode.com/problems/evaluate-reverse-polish-notation/)

## Problem

You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).

Evaluate the expression. Return _an integer that represents the value of the expression_.

**Note** that:

- The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.
- Each operand may be an integer or another expression.
- The division between two integers always **truncates toward zero**.
- There will not be any division by zero.
- The input represents a valid arithmetic expression in a reverse polish notation.
- The answer and all the intermediate calculations can be represented in a **32-bit** integer.

## Solution

To solve this problem, we use a stack to process the tokens. As we iterate through each token, we perform the following actions: If token is a number, we push it onto the stack. If it's an operator (+, -, *, /), we pop the top two values from the stack, apply the operation, and push the result back onto the stack. Be careful with the order when subtract or divide. After processing all the tokens, the stack will contain one final value, which is the result of the RPN expression, and we return this value.

```typescript
function evalRPN(tokens: string[]): number {  
  let stack: number[] = [];  
  for (let c of tokens) {  
    if (c === '+') {  
      let a = stack.pop();  
      let b = stack.pop();  
      stack.push(b + a);  
    } else if (c === '-') {  
      let a = stack.pop();  
      let b = stack.pop();  
      stack.push(b - a);  
    } else if (c === '*') {  
      let a = stack.pop();  
      let b = stack.pop();  
      stack.push(b * a);  
    } else if (c === '/') {  
      let a = stack.pop();  
      let b = stack.pop();  
      stack.push(b / a | 0);  
    } else {  
      stack.push(Number(c));  
    }  }  
  return stack[0];  
};
```
