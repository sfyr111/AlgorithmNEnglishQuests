# 704. Binary Search

704. Binary Search](https://leetcode.com/problems/binary-search/)

## Problem

Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.

You must write an algorithm with `O(log n)` runtime complexity.

## Solution

For a binary search, we compare the middle index to the target value and adjust the left or right index based on the result. We keep repeating until the target is found or the left and right indices meet. If we need to note something, we leave the loop condition less than or equal to the right point and check the edge pointer when the array length is 2.

```typescript
function search(nums: number[], target: number): number {  
   let left = 0;  
   let right = nums.length - 1;  
  
   while (left <= right) {  
      const mid = ((right + left) / 2) | 0;  
  
      if (nums[mid] === target) {  
         return mid;  
      } else if (nums[mid] < target) {  
         left = mid + 1;  
      } else if (nums[mid] > target) {  
         right = mid - 1;  
      }   }  
  
   return -1;  
};
```

